[
    {
        "node": {
            "message": {
                "id": "faPx92C02t57KHF4aEmYxSqZulNouYjxPuxRTrYTHGU",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718459807138"
    },
    {
        "node": {
            "message": {
                "id": "RQ7I6wBoj2WutyxU8QbY6Pp6q1btVew3q_TU0h5nnvs",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "BlockHeights"
            }
        },
        "cursor": "1718455847325"
    },
    {
        "node": {
            "message": {
                "id": "TD3m_hYSGcQrmPel9GF4Hfs8_ts-w6OQbIs9iUbfBHU",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "collectgarbage('count')"
            }
        },
        "cursor": "1718455346151"
    },
    {
        "node": {
            "message": {
                "id": "z-3V0I15MDBg0lkpe7tXehTJaNaNfW57qRxQJ7aNG_o",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "collectgarbage('collect')"
            }
        },
        "cursor": "1718455339092"
    },
    {
        "node": {
            "message": {
                "id": "W7ezO8Df6PHeyDxZZBob3-CCJbm1hfCKfK2YUeoAv5c",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "collectgarbage('count')"
            }
        },
        "cursor": "1718455327570"
    },
    {
        "node": {
            "message": {
                "id": "u8cchfVDLF-jZ_pBZeBrHE4TMVLVleB9op4mgO5ul94",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "BatchesAllowed"
            }
        },
        "cursor": "1718452729376"
    },
    {
        "node": {
            "message": {
                "id": "Av7HMbQKdyhJsRK5UGvbiAXSHueUnNHyIJnWbJAr4f0",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "BlockHeights"
            }
        },
        "cursor": "1718452678204"
    },
    {
        "node": {
            "message": {
                "id": "MOof0I_nVqbx49mFfcm8lnfnpSuLdYmhwjkFI76nSr0",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "BlockHeights"
            }
        },
        "cursor": "1718452623597"
    },
    {
        "node": {
            "message": {
                "id": "6s7k5FT36OBcHY5AFxrjyqC-7q1fPI1CBnUPq8DLGSo",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "\n\n-- module: \"token\"\nlocal function _loaded_mod_token()\nlocal token = { _version = \"0.0.4\" }\n\nlocal json = require('json')\nlocal bint = require('.bint')(256)\nlocal ao = require('ao')\n\nlocal utils = {\n  add = function(a, b)\n    return tostring(bint(a) + bint(b))\n  end,\n  subtract = function(a, b)\n    return tostring(bint(a) - bint(b))\n  end,\n  toBalanceValue = function(a)\n    return tostring(bint(a))\n  end,\n  toNumber = function(a)\n    return tonumber(a)\n  end\n}\n\n--[[\n     Initialize State\n\n     ao.id is equal to the Process.Id\n   ]]\n--\nVariant = \"0.0.3\"\n\n-- token should be idempotent and not change previous state updates\nDenomination = Denomination or 12\nBalances = Balances or {}\n-- 21_000_000 AO Tokens\n-- 21_000_000_000_000_000_000 Armstrongs\nTotalSupply = \"21000000000000000000\"\nName = 'AO'\nTicker = 'AO'\nLogo = Logo or 'SBCCXwwecBlDqRLUjb8dYABExTJXLieawf7m2aBJ-KY'\n\n\n--[[\n     Add handlers for each incoming Action defined by the ao Standard Token Specification\n   ]]\n--\n\n--[[\n     Info\n   ]]\n--\ntoken.info = function(msg)\n  ao.send({\n    Target = msg.From,\n    Name = Name,\n    Ticker = Ticker,\n    Logo = Logo,\n    Denomination = tostring(Denomination)\n  })\nend\n\n\n--[[\n     Balance\n   ]]\n--\ntoken.balance = function(msg)\n  local bal = '0'\n\n  -- If not Recipient is provided, then return the Senders balance\n  if (msg.Tags.Recipient and Balances[msg.Tags.Recipient]) then\n    bal = Balances[msg.Tags.Recipient]\n  elseif msg.Tags.Target and Balances[msg.Tags.Target] then\n    bal = Balances[msg.Tags.Target]\n  elseif Balances[msg.From] then\n    bal = Balances[msg.From]\n  end\n\n  ao.send({\n    Target = msg.From,\n    Balance = bal,\n    Ticker = Ticker,\n    Account = msg.Tags.Recipient or msg.From,\n    Data = bal\n  })\nend\n\n--[[\n     Balances\n   ]]\n--\ntoken.balances = function(msg)\n  ao.send({ Target = msg.From, Data = Balances })\nend\n--[[\n     Transfer\n   ]]\n--\ntoken.transfer = function(msg)\n  if MintCount < 100000 then\n    Send({ Target = msg.From, Data = \"Transfer is locked!\" })\n    return \"Transfer is locked\"\n  end\n  local status, err = pcall(function()\n    assert(type(msg.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\n    assert(bint(msg.Quantity) > bint(0), 'Quantity must be greater than 0')\n\n    if not Balances[msg.From] then Balances[msg.From] = \"0\" end\n    if not Balances[msg.Recipient] then Balances[msg.Recipient] = \"0\" end\n\n    if bint(msg.Quantity) <= bint(Balances[msg.From]) then\n      Balances[msg.From] = utils.subtract(Balances[msg.From], msg.Quantity)\n      Balances[msg.Recipient] = utils.add(Balances[msg.Recipient], msg.Quantity)\n\n      --[[\n          Only send the notifications to the Sender and Recipient\n          if the Cast tag is not set on the Transfer message\n        ]]\n      --\n      if not msg.Cast then\n        -- Debit-Notice message template, that is sent to the Sender of the transfer\n        local debitNotice = {\n          Target = msg.From,\n          Action = 'Debit-Notice',\n          Recipient = msg.Recipient,\n          Quantity = msg.Quantity,\n          Data = Colors.gray ..\n              \"You transferred \" ..\n              Colors.blue .. msg.Quantity .. Colors.gray .. \" to \" .. Colors.green .. msg.Recipient .. Colors.reset\n        }\n        -- Credit-Notice message template, that is sent to the Recipient of the transfer\n        local creditNotice = {\n          Target = msg.Recipient,\n          Action = 'Credit-Notice',\n          Sender = msg.From,\n          Quantity = msg.Quantity,\n          Data = Colors.gray ..\n              \"You received \" ..\n              Colors.blue .. msg.Quantity .. Colors.gray .. \" from \" .. Colors.green .. msg.From .. Colors.reset\n        }\n\n        -- Add forwarded tags to the credit and debit notice messages\n        for tagName, tagValue in pairs(msg) do\n          -- Tags beginning with \"X-\" are forwarded\n          if string.sub(tagName, 1, 2) == \"X-\" then\n            debitNotice[tagName] = tagValue\n            creditNotice[tagName] = tagValue\n          end\n        end\n\n        -- Send Debit-Notice and Credit-Notice\n        ao.send(debitNotice)\n        ao.send(creditNotice)\n      end\n    else\n      ao.send({\n        Target = msg.From,\n        Action = 'Transfer-Error',\n        ['Message-Id'] = msg.Id,\n        Error = 'Insufficient Balance!'\n      })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n--[[\n     Total Supply\n   ]]\n--\ntoken.totalSupply = function(msg)\n  assert(msg.From ~= ao.id, 'Cannot call Total-Supply from the same process!')\n\n  ao.send({\n    Target = msg.From,\n    Action = 'Total-Supply',\n    Data = TotalSupply,\n    Ticker = Ticker\n  })\nend\n\n--[[\n Burn\n]] --\ntoken.burn = function(msg)\n  assert(type(msg.Quantity) == 'string', 'Quantity is required!')\n  assert(bint(msg.Quantity) <= bint(Balances[msg.From]), 'Quantity must be less than or equal to the current balance!')\n\n  Balances[msg.From] = utils.subtract(Balances[msg.From], msg.Quantity)\n  TotalSupply = utils.subtract(TotalSupply, msg.Quantity)\n\n  ao.send({\n    Target = msg.From,\n    Data = Colors.gray .. \"Successfully burned \" .. Colors.blue .. msg.Quantity .. Colors.reset\n  })\nend\n\n\nreturn token\n\nend\n\n_G.package.loaded[\"token\"] = _loaded_mod_token()\n\n-- module: \"allocator\"\nlocal function _loaded_mod_allocator()\n  local allocator = { _version = \"0.0.1\" }\n\nlocal bint = require('.bint')(256)\n\n-- utility functions\nlocal function reduce(func, initial, t)\n    local result = initial\n    for _, v in ipairs(t) do\n        result = func(result, v)\n    end\n    return result\nend\n\nlocal function values(t)\n    local result = {}\n    for _, v in pairs(t) do\n        table.insert(result, v)\n    end\n    return result\nend\n\nlocal function keys(t)\n    local result = {}\n    for k, _ in pairs(t) do\n        table.insert(result, k)\n    end\n    return result\nend\n\nlocal function sum(t)\n    return reduce(function(a, b) return a + b end, 0, t)\nend\n\nlocal function mergeAll(tables)\n    local result = {}\n    for _, t in ipairs(tables) do\n        for k, v in pairs(t) do\n            result[k] = v\n        end\n    end\n    return result\nend\n\n\nfunction allocator.allocate(balances, reward)\n    local function add(a, b) return bint(a) + bint(b) end\n\n    -- Calculate total positive balances\n    local total = reduce(add, bint(0), values(balances))\n    \n    -- Allocate rewards based on balances\n    local allocation = mergeAll(\n        reduce(function(a, s)\n            local asset = s[1]\n            local balance = bint(s[2])\n            \n            if balance < bint(1) then\n                return a\n            end\n            \n            local pct = (balance / total) * bint(100)\n            local coins = math.floor(bint(reward) * (pct / bint(100)) + (bint(1) / bint(2))) -- Round to nearest integer\n            \n            table.insert(a, {[asset] = tostring(coins)})\n            return a\n        end, {}, (function()\n            local result = {}\n            for k, v in pairs(balances) do\n                table.insert(result, {k, v})\n            end\n            return result\n        end)())\n    )\n    \n    -- Handle off by one errors\n    local remainder = reward - sum(values(allocation))\n    local k = keys(allocation)\n    local i = 1\n    while remainder > 0 do\n        allocation[k[i]] = allocation[k[i]] + 1\n        remainder = remainder - 1\n        i = (i % #k) + 1\n    end\n    \n    return allocation\nend\n\nreturn allocator\n\nend\n\n_G.package.loaded[\"allocator\"] = _loaded_mod_allocator()\n\n-- module: \"mint\"\nlocal function _loaded_mod_mint()\n--[[\n  Mint Module handles the minting functions for AO Token\n\n]]\nlocal bint = require('.bint')(256)\nlocal sqlite3 = require('lsqlite3')\nlocal Allocator = require('allocator')\n\nlocal allocate = Allocator.allocate\nMintCount = MintCount or 0\nMintDb = MintDb or sqlite3.open_memory()\nlocal INSERT_ORACLE_SQL = \"INSERT INTO Oracles (Oracle, Name, StartTimestamp, DelayDepositInterval) VALUES (?, ?, ?, ?)\"\n-- DbAdmin Module is required\ndbAdmin = dbAdmin or require('@rakis/DbAdmin').new(MintDb)\n-- processes or wallets allowed to send event batches\nBatchesAllowed = BatchesAllowed or\n    { \"88T4YtovZ9ZDgEh1Xb0T_VlF9rXCRFOdi_B2Eyv1eMs\", \"w7PAoAtLRjE48eW1qoKt5n5rzCyeOxDTt6RbYwELxDU\" }\nLastMintHeight = LastMintHeight or \"1443785\"\nRewards = {}\n\nlocal utils = {\n  add = function(a, b)\n    if (bint(a) < bint(0)) then\n      a = 0\n    end\n    if (bint(b) < bint(0)) then\n      b = 0\n    end\n    return tostring(bint(a) + bint(b))\n  end,\n  subtract = function(a, b)\n    if bint(b) < bint(0) then\n      b = 0\n    end\n    local value = bint(a) - bint(b)\n    if value < bint(0) then\n      return \"0\"\n    else\n      return tostring(bint(a) - bint(b))\n    end\n  end,\n  toBalanceValue = function(a)\n    return tostring(bint(a))\n  end,\n  toNumber = function(a)\n    return tonumber(a)\n  end,\n  greaterThan = function(a, b)\n    return bint(a) > bint(b)\n  end\n}\n\nlocal mint = { _version = \"0.0.1\" }\n\nfunction DbApply(sql, values)\n  assert(type(sql) == 'string', 'SQL MUST be a String')\n  assert(type(values) == 'table', 'args MUST be an array of values')\n  local stmt = MintDb:prepare(sql)\n  stmt:bind_values(table.unpack(values))\n  if stmt:step() ~= sqlite3.DONE then\n    error(sql .. ' statement failed because ' .. MintDb:errmsg())\n  end\n  stmt:finalize()\nend\n\n-- local db functions\nlocal function insertOracle(oracle, name, startTimestamp, delayDepositInterval)\n  local stmt = MintDb:prepare(INSERT_ORACLE_SQL)\n\n  if stmt == nil then\n    error(\"Failed to prepare statement: \" .. MintDb:errmsg())\n  end\n\n  stmt:bind_values(oracle, name, startTimestamp, delayDepositInterval)\n\n  local result = stmt:step()\n  if result ~= sqlite3.DONE then\n    error(\"Failed to insert record: \" .. MintDb:errmsg())\n  end\n\n  stmt:finalize()\n  return result\nend\n\nlocal function insertDeposit(recipient, oracle, user, token, amount, updated)\n  -- Prepare the SQL select statement to check if the record exists\n  local select_stmt = MintDb:prepare(\"SELECT Amount FROM Rewards WHERE Recipient = ? AND Token = ?\")\n  select_stmt:bind_values(recipient, token)\n  local result = select_stmt:step()\n  local rewardAccountExists = false\n  local current_amount = 0\n  if result == sqlite3.ROW then\n    rewardAccountExists = true\n    current_amount = bint(select_stmt:get_value(0))\n  end\n  select_stmt:finalize()\n  local total_amount = utils.add(current_amount, amount)\n\n  if rewardAccountExists then\n    DbApply(\n      \"UPDATE Rewards SET Amount = ?, Updated = ? WHERE Recipient = ?\",\n      table.pack(total_amount, updated, recipient)\n    )\n  else\n    DbApply(\n      \"INSERT INTO Rewards (Recipient, Oracle, User, Token, Amount, Updated) VALUES (?, ?, ?, ?, ?, ?)\",\n      table.pack(recipient, oracle, user, token, total_amount, updated)\n    )\n  end\nend\n\nlocal function updateWithdraw(user, amount, updated, token)\n  -- Prepare the SQL select statement to check if the record exists\n  local select_stmt = MintDb:prepare(\"SELECT Amount FROM Rewards WHERE Recipient = ? and Token = ?\")\n  select_stmt:bind_values(user, token or \"AR\")\n  local result = select_stmt:step()\n\n  local current_amount = 0\n  if result == sqlite3.ROW then\n    current_amount = bint(select_stmt:get_value(0))\n  end\n  select_stmt:finalize()\n\n  -- Calculate the new total amount\n  local total_amount = utils.subtract(current_amount, amount)\n  if current_amount > 0 then\n    DbApply(\"UPDATE Rewards SET Amount = ?, Updated = ? WHERE Recipient = ?\", table.pack(total_amount, updated, user))\n  end\nend\n\n-- init database\nfunction mint.init()\n  MintDb:exec [[\nCREATE TABLE IF NOT EXISTS Oracles (\n  Oracle TEXT PRIMARY KEY,\n  Name TEXT NOT NULL,\n  StartTimestamp TEXT NOT NULL,\n  DelayDepositInterval TEXT NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS Rewards (\n  Recipient TEXT NOT NULL,\n  Token TEXT NOT NULL,\n  Oracle TEXT NOT NULL,\n  User TEXT NOT NULL,\n  Amount TEXT NOT NULL,\n  Updated TEXT NOT NULL,\n  PRIMARY KEY (Recipient, Token),\n  FOREIGN KEY (Oracle) REFERENCES Oracles(Oracle)\n);\n  ]]\n  return \"Mint Initialized.\"\nend\n\nfunction mint.isOracle(msg)\n  if not Utils.includes(msg.Owner, ao.authorities) then\n    return false\n  end\n  local oracle = msg.From\n\n  local stmt = MintDb:prepare(\"SELECT 1 FROM Oracles WHERE Oracle = ?\")\n  stmt:bind_values(oracle)\n  stmt:step()\n  local exists = (stmt:get_value(0) ~= nil)\n  stmt:finalize()\n  return exists\nend\n\n-- handle register Oracle\nfunction mint.registerOracle(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Oracle) == \"string\", \"Oracle is required!\")\n    assert(type(msg.Name) == \"string\", \"Name is required!\")\n    assert(type(msg.Start) == \"string\", \"Start Timestamp required!\")\n    assert(type(msg.DepositDelay) == \"string\", \"Deposit Delay is required\")\n    insertOracle(msg.Oracle, msg.Name, msg.Start, msg.DepositDelay)\n    Send({ Target = msg.From, Data = \"registered.\" })\n  end)\n  if err then\n    print(err)\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle Deposit request\nfunction mint.handleDeposit(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Tags.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.User) == \"string\", \"User is required!\")\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    assert(type(msg.TokenAmount) == \"string\", \"TokenAmount is required!\")\n    assert(type(msg.Reward) == \"string\", \"Reward is required!\")\n    assert(type(msg.TransactionHash) == \"string\", \"TransactionHash is required!\")\n    -- assert(type(msg.Tags.Timestamp) == \"string\", \"Timestamp is required!\")\n    insertDeposit(msg.Recipient, msg.From, msg.User, msg.Token, msg.TokenAmount, msg.Timestamp)\n    -- Send({ Target = msg.From, Action = \"Deposit-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    if msg.User ~= msg.Recipient then\n      Send({ Target = msg.Recipient, Action = \"Deposit-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle Withdraw request\nfunction mint.handleWithdraw(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Tags.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.User) == \"string\", \"User is required!\")\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    assert(type(msg.TokenAmount) == \"string\", \"TokenAmount is required!\")\n    assert(type(msg.Reward) == \"string\", \"Reward is required!\")\n    assert(type(msg.TransactionHash) == \"string\", \"TransactionHash is required!\")\n    -- assert(type(msg.Tags.Timestamp) == \"string\", \"Timestamp is required!\")\n    updateWithdraw(msg.Recipient, msg.TokenAmount, msg.Timestamp, msg.Token)\n    -- Send({ Target = msg.From, Action = \"Withdraw-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    if msg.User ~= msg.Recipient then\n      Send({ Target = msg.Recipient, Action = \"Withdraw-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle OverPlus reward distribution\nfunction mint.handleOverPlus(msg)\n  -- TODO:\nend\n\nlocal function split_by_linefeed(str)\n  local result = {}\n  for line in str:gmatch(\"[^\\r\\n]+\") do\n    table.insert(result, line)\n  end\n  return result\nend\n\nlocal function split_by_comma(str)\n  local result = {}\n  for line in str:gmatch(\"[^,]+\") do\n    table.insert(result, line)\n  end\n  return result\nend\n\nBlockHeights = {}\n\n-- Handle Batch Deposits mainly for loading WalletList\nfunction mint.Batch(msg)\n  local status, err = pcall(function()\n    if BlockHeights[msg.Height] then\n      print(\"Already Applied Block: \" .. msg.Height)\n      return \"OK\"\n    end\n    if msg.Height then\n      BlockHeights[msg.Height] = true \n      print(\"Height: \" .. msg.Height)\n      LastMintHeight = msg.Height\n    end\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    -- Batch can be in two formats\n    -- 1. Address:Balance KeyValue\n    -- 2. Mint Event Transactions \"Format = 'Event-List'\"\n    if msg.Format and msg.Format == \"Event-List\" then\n      print('Format: ' .. msg.Format)\n      -- event list\n      local events = require('json').decode(msg.Data)\n      print(string.format(\"Received %d events to process\", #events))\n      for i = 1, #events do\n        local event = events[i]\n        if event.Action == \"Deposit\" then\n          -- print(string.format('Deposited %s for %s', event.TokenAmount, event.Recipient))\n          insertDeposit(event.Recipient, msg.From, event.User, event.Token, event.TokenAmount, msg.Timestamp)\n        elseif event.Action == \"Withdraw\" then\n          local total = utils.add(event.TokenAmount, event.Fee or \"0\")\n          -- print(string.format(\"Withdraw %s for %s\", total, event.User))\n          updateWithdraw(event.User, total, event.Timestamp, \"AR\")\n        end\n      end\n    elseif msg.Format and msg.Format == \"Event-List-CSV\" then\n      local lines = split_by_linefeed(msg.Data)\n      for i = 1, #lines do\n        local fields = split_by_comma(lines[i])\n        local event = {\n          Action = fields[1],\n          Recipient = fields[2],\n          Reward = fields[3],\n          Fee = fields[4],\n          Timestamp = fields[5]\n        }\n        if event.Action == \"Deposit\" then\n          insertDeposit(event.Recipient, msg.From, event.Recipient, \"AR\", event.Reward, event.Timestamp)\n        elseif event.Action == \"Withdraw\" then\n          local total = utils.add(event.Reward or \"0\", event.Fee or \"0\")\n          updateWithdraw(event.Recipient, total, event.Timestamp)\n        end\n        -- print('Processed: ' .. lines[i])\n      end\n      return #lines\n    else\n      -- do key/value\n      local deposits = require('json').decode(msg.Data)\n      for k, v in pairs(deposits) do\n        print('insert deposit: ' .. v .. ' to ' .. k)\n        insertDeposit(k, msg.From, k, msg.Token, v, msg.Timestamp)\n      end\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\nfunction mint.LoadBalances(msg)\n  local status, err = pcall(function()\n    local deposits = require('json').decode(msg.Data)\n    for k, v in pairs(deposits) do\n      print('initialize balance: ' .. v .. ' to ' .. k)\n      Balances[k] = v\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Mint\nfunction mint.Mint(msg)\n  local status, err = pcall(function()\n    if msg.Action == \"Cron\" and MODE == \"OFF\" then\n      print(\"Not Minting by CRON untils MODE is set to ON\")\n      return \"OK\"\n    end\n\n    print('Minting Every 5 minutes!')\n    -- Get Reward List\n    local list = Utils.reduce(\n      function(acc, item)\n        acc[item.Recipient] = item.Amount\n        return acc\n      end,\n      {},\n      dbAdmin:exec [[select Recipient, Amount from Rewards;]]\n    )\n    -- Get Remaining Supply\n    local remainingSupply = utils.subtract(TotalSupply, MintedSupply)\n    -- Get Reward Percent\n    local reward = string.format('%.0f', bint(remainingSupply) * ARM_Mint_PCT)\n    -- Allocate Rewards\n    local rewards = allocate(list, reward)\n    -- Update Balances\n    for k, v in pairs(rewards) do\n      if not Balances[k] then\n        Balances[k] = \"0\"\n      end\n      Balances[k] = utils.add(Balances[k], v)\n      -- print(\"Address: \" .. k .. \" Balance \" .. Balances[k])\n      -- supply = utils.add(supply, Balances[k])\n    end\n    -- Calculate Circulating Supply\n    MintedSupply = Utils.reduce(function(a, b) return tostring(bint(a) + bint(b)) end, \"0\", Utils.values(Balances))\n    MintCount = MintCount + 1\n\n    print(\"Total Minted Supply\" .. MintedSupply)\n    print(\"Mints: \" .. MintCount)\n\n    LastMintTimestamp = msg.Timestamp\n  end)\n  if err then\n    print(err)\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return string.format([[\n  Total Minted Supply: %s\n  Mints: %s\n  ]], MintedSupply, MintCount)\nend\n\n-- matchers\nfunction mint.isRegister(msg)\n  return ao.id == msg.From and ao.isTrusted(msg) and msg.Action == \"Oracle.Register\"\nend\n\nfunction mint.isDeposit(msg)\n  return msg.Action == \"Deposit\" and mint.isOracle(msg)\nend\n\nfunction mint.isWithdraw(msg)\n  return msg.Action == \"Withdraw\" and mint.isOracle(msg)\nend\n\nfunction mint.isOverPlus(msg)\n  return msg.Action == \"OverPlus\" and mint.isOracle(msg)\nend\n\nfunction mint.isBatch(msg)\n  -- return msg.Action == \"Mint.Batch\" and MODE == \"OFF\" and msg.Owner == \"w7PAoAtLRjE48eW1qoKt5n5rzCyeOxDTt6RbYwELxDU\"\n  return msg.Action == \"Mint.Batch\" and Utils.includes(msg.From, BatchesAllowed)\nend\n\nfunction mint.isLoadBalances(msg)\n  return msg.Action == \"Mint.LoadBalances\" and Utils.includes(msg.From, BatchesAllowed)\nend\n\nfunction mint.isCron(msg)\n  return msg.Action == \"Cron\" and msg.From == \"gCpQfnG6nWLlKs8jYgV8oUfe38GYrPLv59AC7LCtCGg\"\nend\n\nreturn mint\n\nend\n\n_G.package.loaded[\"mint\"] = _loaded_mod_mint()\n\n--[[\n  AO Token uses the local token contract\n]]\nlocal token = require('token')\nlocal bint = require('.bint')(256)\n\n-- LastMintTimestamp\nLastMintTimestamp = LastMintTimestamp or 0\n-- MODE - OFF = Manual Minting only, ON = Automated Minting\nMODE = MODE or \"OFF\"\n\n-- Circulating Supply\nMintedSupply = MintedSupply or \"0\"\n-- 5 MIN REWARD SUPPLY PERCENT\nAR_Mint_PCT = bint(\"1647321875\") / bint(\"1000\")\nARM_Mint_PCT = AR_Mint_PCT / bint(\"1000000000000\")\n\nMint = require('mint')\n\nHandlers.add('mint.register', Mint.isRegister, Mint.registerOracle)\nHandlers.add('mint.deposit', Mint.isDeposit, Mint.handleDeposit)\nHandlers.add('mint.withdraw', Mint.isWithdraw, Mint.handleWithdraw)\n\nHandlers.add('cron.mint', Mint.isCron, Mint.Mint)\nHandlers.add('mint.batch', Mint.isBatch, Mint.Batch)\nHandlers.add('mint.loadbalances', Mint.isLoadBalances, Mint.LoadBalances)\n\nHandlers.add('token.info',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Info\"),\n  token.info\n)\n\nHandlers.add('token.balance',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Balance\"),\n  token.balance\n)\n\nHandlers.add('token.balances',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Balances\"),\n  token.balances\n)\n\nHandlers.add('token.transfer',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Transfer\"),\n  token.transfer\n)\n\nHandlers.add('token.totalSupply',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Total-Supply\"),\n  token.totalSupply\n)\n\nHandlers.add('token.burn',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Burn\"),\n  token.burn\n)\n\nHandlers.add('token.mintedSupply',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Minted-Supply\"),\n  function(msg)\n    Send({ Target = msg.From, Data = MintedSupply })\n    print(\"Id: \" .. msg.From .. \" Requested Minted Supply: \" .. MintedSupply)\n  end\n)\n\n-- need to create this in aos\n--[[\nNeed to implement this in aos to always run this handler no matter what at the end.\n\nHandlers.always('mint.automatic', function (msg)\n  local Now = msg.Timestamp\n  if MODE == \"ON\" then\n     if Now > LastMintTimestamp + FIVE_MINUTES and Now < LastMintTimestamp + TEN_MINUTES then\n       Mint\n     end\n     Mint.Mint(msg)\n     return \"ok\"\n  end\n\nend)\n]]\n\nreturn 2\n"
            }
        },
        "cursor": "1718452594911"
    },
    {
        "node": {
            "message": {
                "id": "pcOY6U0GsMKKcO2buPdn98rLwIwIrcjMU-PtOG4TCeQ",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718452526824"
    },
    {
        "node": {
            "message": {
                "id": "Uh0SovCywtzubX-myhcB6xqdikYstroaGSu_lZzm_AM",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718452482956"
    },
    {
        "node": {
            "message": {
                "id": "sgwFwiftijM5rJXIuxahz9-YKiLxnil9pnSNdooa4Ko",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintedSupply"
            }
        },
        "cursor": "1718450793824"
    },
    {
        "node": {
            "message": {
                "id": "n8dL87iAj0NnL2mp_cNXJo1ks0HE1NLjXL0yzGMSR2c",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Balances[\"Jr4Q2kdQqmB7_llYg-leC2bmgPnxvELsWSVQ0smR6u8\"]"
            }
        },
        "cursor": "1718450102794"
    },
    {
        "node": {
            "message": {
                "id": "mcnPOJv_ijLpRlomnnYgGpvC06zZJOZJXDZpOB7CkVQ",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "BatchesAllowed"
            }
        },
        "cursor": "1718449120224"
    },
    {
        "node": {
            "message": {
                "id": "nI4H7y55GQzoUegtuQc-6gjqEA0IbHhIvjp1i5lpG40",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718448897881"
    },
    {
        "node": {
            "message": {
                "id": "oDqs7SUA-uwR9t6fD9nr0VxsbAkCfy--mUh3zKcbOwQ",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718414319141"
    },
    {
        "node": {
            "message": {
                "id": "n2I0tvvjOnYID_2WqSThJVlmLDnEYyPQXeTe5kPgQl0",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Balances[\"Jr4Q2kdQqmB7_llYg-leC2bmgPnxvELsWSVQ0smR6u8\"]"
            }
        },
        "cursor": "1718413409190"
    },
    {
        "node": {
            "message": {
                "id": "b-2Qw_Y6YPDlvcVl0YQFfKbJe2i7kGJGqXyexjuP59c",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718413395513"
    },
    {
        "node": {
            "message": {
                "id": "YMIotHoFZqpebQeBuuNZG2M_4hAClxWUqZrVYz4LHJc",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718407741603"
    },
    {
        "node": {
            "message": {
                "id": "IngntSM3l-FH3tZjefS8UXrUWZ2dOaC5HpMUEvMgEeE",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintedSupply"
            }
        },
        "cursor": "1718406681659"
    },
    {
        "node": {
            "message": {
                "id": "pIMRSFEFpoRX2Mf4kBCuCAC8O-_CaqGlkYbeou1_Jfk",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Logo"
            }
        },
        "cursor": "1718404601810"
    },
    {
        "node": {
            "message": {
                "id": "zUMujZOwUhm_qwPQCQmsvZfmfogE1LPH1A7f6nfK8Wo",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Balances[\"P-TVVjSAWDzJ1p9mZ3iuMHarbu1ReFi72qnygXc4jAE\"]"
            }
        },
        "cursor": "1718403323077"
    },
    {
        "node": {
            "message": {
                "id": "S3px3F2skW5y-NaoNhvYCP9_A2qFohQ8sIaEwfCcNXc",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MODE = \"ON\""
            }
        },
        "cursor": "1718400634018"
    },
    {
        "node": {
            "message": {
                "id": "TTL4xHhI0jzxD_ZoeLV7DSM2oRYEaFmtSCIp0bedbok",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718400438035"
    },
    {
        "node": {
            "message": {
                "id": "DHyADSvscWEaoy0d_9OFGVgV1gl7e45etullf9GF5O8",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "LastMintHeight"
            }
        },
        "cursor": "1718399649750"
    },
    {
        "node": {
            "message": {
                "id": "xt-wGnKIL-tGFgvxFao96VYoIkoYYsA_pBi1kvmbYoQ",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "LastMintedHeight"
            }
        },
        "cursor": "1718399620531"
    },
    {
        "node": {
            "message": {
                "id": "OkwxoKjVEDldAwmz9E6Omq3SjXjG1rF83RyzPO_ORFk",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718399018189"
    },
    {
        "node": {
            "message": {
                "id": "ZEmdq71TalpCgW7oHND9Or7nUUAK0sa7F6b004v-kps",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "collectgarbage('count')"
            }
        },
        "cursor": "1718399002307"
    },
    {
        "node": {
            "message": {
                "id": "_CxpqbTO25HNqu5_VGIhlQ4Jn_q4-uB87biSc5l2LNQ",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "collectgarbage('collect')"
            }
        },
        "cursor": "1718398988543"
    },
    {
        "node": {
            "message": {
                "id": "NoHVk09sVGvpJlgKPBDxCDzkKCGqin9XxdBLTey6W0o",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "collectgarbage('count')"
            }
        },
        "cursor": "1718398973585"
    },
    {
        "node": {
            "message": {
                "id": "1zpTXPazNy_qM4iWEwB2aFen_eMIOS0jUujUOeTq7ls",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "collectgarbage('count')collectgarbage('count')"
            }
        },
        "cursor": "1718398955444"
    },
    {
        "node": {
            "message": {
                "id": "elxIj1h3Rhua75mye8k0lEkmrbEKb9POYPGyGJjCDWE",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718398810791"
    },
    {
        "node": {
            "message": {
                "id": "5N7rW_e7ldBLDWWeJgmXQsHFgg909KpsQ_etwVk8Ck4",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718398607723"
    },
    {
        "node": {
            "message": {
                "id": "p-sqWOfLyOWlzuN1bPSoEoM0ej1AA-XIzhTWPCOhnJY",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718398520843"
    },
    {
        "node": {
            "message": {
                "id": "lngpRaS3xoyaCoCexM58jlECm66E5Ag5t2hdp7ESGtE",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718398448882"
    },
    {
        "node": {
            "message": {
                "id": "_6Ob59XRWfO70Gl3WQcIcnlxLOXndAm2wws1mbdhrGw",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718398369296"
    },
    {
        "node": {
            "message": {
                "id": "jQk9a5sasAdkej-2rjyKA-p2U6740d_31lAiffUtr0U",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718398261235"
    },
    {
        "node": {
            "message": {
                "id": "Yl-q9P71x1ztXwXEV51o_Nx1UVOxAXr46wQr3Y3x08k",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "LastMintHeight"
            }
        },
        "cursor": "1718398173323"
    },
    {
        "node": {
            "message": {
                "id": "FL4GKJ_LfGvIJFlAGYjU7IxBtek5Wl9LhpgXlKDM6Lw",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718398091229"
    },
    {
        "node": {
            "message": {
                "id": "xno8EgXZuhwHxbPEIdc3buIGD9b0ee5UQUY2LIUpuZE",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Balances[\"qdpklNc-gDIGsjjNME6XrGchibzOffw9UMrC4orV1ZQ\"]"
            }
        },
        "cursor": "1718398044350"
    },
    {
        "node": {
            "message": {
                "id": "q2m4xktiO0nYGlraef_U0oHsbeAZNML20XdsqKmkd2M",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "dbAdmin:exec[[select * from Rewards where Recipient = \"qdpklNc-gDIGsjjNME6XrGchibzOffw9UMrC4orV1ZQ\";]]"
            }
        },
        "cursor": "1718398021024"
    },
    {
        "node": {
            "message": {
                "id": "kHZQ-cOe9A-vDx6rc4ZvQyDXxwXz0Zk4UDb8MSq4dyk",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718397900240"
    },
    {
        "node": {
            "message": {
                "id": "rkhHJuCVngM92KS1jQzR3bsXwIBok8vcn0gkOXoiCio",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718397801128"
    },
    {
        "node": {
            "message": {
                "id": "rxAVOOnl16aawzzn_grUO1fv4E7SdtMokFqBzoW6XZY",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718397732377"
    },
    {
        "node": {
            "message": {
                "id": "OwzaFRYQo5N7tBO29B_oPQLmFkLEUfO7QIKT_vqKe-M",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718397641379"
    },
    {
        "node": {
            "message": {
                "id": "mQV3Ug3I4Q1jS97hOQf5kQJ54p0XH3H4Qo8XmeYJTvw",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718397526513"
    },
    {
        "node": {
            "message": {
                "id": "CShaNYJGqp35GfivOPZkhLhDBd2dxNpiJjlhPxLHMMI",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718397439615"
    },
    {
        "node": {
            "message": {
                "id": "k9HHyv7GzeYxGxupbEqedGgR0QLTHsmjuwn1W-PvyCA",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718397313355"
    },
    {
        "node": {
            "message": {
                "id": "slak80ha_xgErtDiZWXQddTdUuhvi4wfRBBCcaRUpFc",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718397156982"
    },
    {
        "node": {
            "message": {
                "id": "4aHQKXr6xhWOV32H7Pz8cMPrEKmEsECi5zfsUS9NmNU",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718396965463"
    },
    {
        "node": {
            "message": {
                "id": "0Izn5SldZq2DQuBtlaTwJFlZABL-t80P5BXpDSTJ6CU",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Balances[\"vh-NTHVvlKZqRxc8LyyTNok65yQ55a_PJ1zWLb9G2JI\"]"
            }
        },
        "cursor": "1718396906171"
    },
    {
        "node": {
            "message": {
                "id": "b_msOBdE9DuUzkUfczzaQsCzYRf3y_-osSsSrde4xxQ",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718396846399"
    },
    {
        "node": {
            "message": {
                "id": "JX7v4-h5NiKtDm2xUxycSXxa6_hVU2fzE7G-KgCBxU8",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718396765144"
    },
    {
        "node": {
            "message": {
                "id": "V98g7_X-wEj02WiLyeYMKTtVmrRWdQNdKq3w3w86c94",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718396621246"
    },
    {
        "node": {
            "message": {
                "id": "PjvpRREIidSNDhZ_gdvTYMcC_hKG_mOJa5ZWsAvImM4",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718396527766"
    },
    {
        "node": {
            "message": {
                "id": "FSkxtdANg3ueUT627skMPeWVrsiD7jZGnK5yxAmYK9s",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718396378146"
    },
    {
        "node": {
            "message": {
                "id": "H5KawTgR1mkvJXKcuBX3fvUYc6suU5Kkhii619cA-a0",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718396295037"
    },
    {
        "node": {
            "message": {
                "id": "xuBw_IM_3TE_ZP9uyHbXIP5XreJJbRgRx2DpT2ugIkY",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718396178774"
    },
    {
        "node": {
            "message": {
                "id": "fF21AnobLw74qXXa1_jHBxxLJltUgz3HyjYxaakRwc0",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718396103015"
    },
    {
        "node": {
            "message": {
                "id": "16UZqi6RFL-JKJNDMRNCdwBmX6cSb9_eiNqON8-k5mM",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718395909160"
    },
    {
        "node": {
            "message": {
                "id": "Hv9eLO9K5Ar-Ji0a0EdLiX6qr6D9kiX8NWiEAZJBqEY",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718395628976"
    },
    {
        "node": {
            "message": {
                "id": "5lEVq7Gnj-StgjSlq3cnQRHz9k6itm2Y0c22_jGtN_U",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718395543551"
    },
    {
        "node": {
            "message": {
                "id": "dFTUQtK2Ex1Apc2bIblmltmM5LaYMF_j5jqHhFG84io",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718394005903"
    },
    {
        "node": {
            "message": {
                "id": "rnhsRYtwU6prfo0-c4iNcSXlmk8P43aumH8aqxA3FJQ",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "LastMintHeight"
            }
        },
        "cursor": "1718393574783"
    },
    {
        "node": {
            "message": {
                "id": "mWjPgqMUAGC5VW5n1R_-6xpKhamMXwpjPytcqVwJC4M",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718393289977"
    },
    {
        "node": {
            "message": {
                "id": "OwZ17z6n5z6AAamUJG-izXJCVIUEc7kIxx8ej7KPMI4",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718393094063"
    },
    {
        "node": {
            "message": {
                "id": "Pvfp6t8Tti4UEKT8KahPFqHFjMoc90LWgf0El92XyV8",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718392881842"
    },
    {
        "node": {
            "message": {
                "id": "4ztJghDeqRo6tX3eWdg2q4_kc8lF04QvljN6MOgH6X4",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718392769981"
    },
    {
        "node": {
            "message": {
                "id": "1Jd0x7--jrRr_x4a5XztP_zZZY0eKV14UPbCdnJdi5s",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718392650702"
    },
    {
        "node": {
            "message": {
                "id": "2cgNyFExYYQauUTInMYZ6j1s_VLccs9VXQlNOZ2bwLU",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718392563633"
    },
    {
        "node": {
            "message": {
                "id": "4wg_nNQsbqrrythiZklZr_NsxJxD3E41cjAkDY8YlFM",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718392417083"
    },
    {
        "node": {
            "message": {
                "id": "mpSLBA601_zB2HvbOQr9RhWahj7Xy7UI8DrpHJ9dlfQ",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Manual\", From = ao.id})"
            }
        },
        "cursor": "1718392257300"
    },
    {
        "node": {
            "message": {
                "id": "rdEPP01L31OWR9EjrYVHIRNHDLwWvvhzF3ZUPeOAnZU",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintCount"
            }
        },
        "cursor": "1718392183991"
    },
    {
        "node": {
            "message": {
                "id": "FbUFWA06ZT9VQk_cAxzwXM3e-npPSLObqwT2Di_ysVg",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.Mint({Action = \"Cron\", From = ao.id})"
            }
        },
        "cursor": "1718392144817"
    },
    {
        "node": {
            "message": {
                "id": "D6x2KKmWiNlqQBFm4aiA-MIlYvXsivwm58xYi1tEF28",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "BatchesAllowed"
            }
        },
        "cursor": "1718392066928"
    },
    {
        "node": {
            "message": {
                "id": "IOuejnGyddT2kKRV1zvfSlBQ_7olClHvENbjOJwLlHI",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "table.insert(BatchesAllowed, \"0_FnmJQlGLRa5Cldw7Ag_PtcdVSuUr_XdPmGB_avxnQ\")"
            }
        },
        "cursor": "1718392061030"
    },
    {
        "node": {
            "message": {
                "id": "kddjWZyG28NEJboseUe5VwmBjkTV5-QJre7jJEIkxpA",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "BatchesAllowed"
            }
        },
        "cursor": "1718392034805"
    },
    {
        "node": {
            "message": {
                "id": "jcaYy2wawx8keFevzyFf7P6srBdQ5z9k6akQyI-H1vE",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "\n\n-- module: \"token\"\nlocal function _loaded_mod_token()\nlocal token = { _version = \"0.0.4\" }\n\nlocal json = require('json')\nlocal bint = require('.bint')(256)\nlocal ao = require('ao')\n\nlocal utils = {\n  add = function(a, b)\n    return tostring(bint(a) + bint(b))\n  end,\n  subtract = function(a, b)\n    return tostring(bint(a) - bint(b))\n  end,\n  toBalanceValue = function(a)\n    return tostring(bint(a))\n  end,\n  toNumber = function(a)\n    return tonumber(a)\n  end\n}\n\n--[[\n     Initialize State\n\n     ao.id is equal to the Process.Id\n   ]]\n--\nVariant = \"0.0.3\"\n\n-- token should be idempotent and not change previous state updates\nDenomination = Denomination or 12\nBalances = Balances or {}\n-- 21_000_000 AO Tokens\n-- 21_000_000_000_000_000_000 Armstrongs\nTotalSupply = \"21000000000000000000\"\nName = 'AO'\nTicker = 'AO'\nLogo = Logo or 'SBCCXwwecBlDqRLUjb8dYABExTJXLieawf7m2aBJ-KY'\n\n\n--[[\n     Add handlers for each incoming Action defined by the ao Standard Token Specification\n   ]]\n--\n\n--[[\n     Info\n   ]]\n--\ntoken.info = function(msg)\n  ao.send({\n    Target = msg.From,\n    Name = Name,\n    Ticker = Ticker,\n    Logo = Logo,\n    Denomination = tostring(Denomination)\n  })\nend\n\n\n--[[\n     Balance\n   ]]\n--\ntoken.balance = function(msg)\n  local bal = '0'\n\n  -- If not Recipient is provided, then return the Senders balance\n  if (msg.Tags.Recipient and Balances[msg.Tags.Recipient]) then\n    bal = Balances[msg.Tags.Recipient]\n  elseif msg.Tags.Target and Balances[msg.Tags.Target] then\n    bal = Balances[msg.Tags.Target]\n  elseif Balances[msg.From] then\n    bal = Balances[msg.From]\n  end\n\n  ao.send({\n    Target = msg.From,\n    Balance = bal,\n    Ticker = Ticker,\n    Account = msg.Tags.Recipient or msg.From,\n    Data = bal\n  })\nend\n\n--[[\n     Balances\n   ]]\n--\ntoken.balances = function(msg)\n  ao.send({ Target = msg.From, Data = Balances })\nend\n--[[\n     Transfer\n   ]]\n--\ntoken.transfer = function(msg)\n  if MintCount < 100000 then\n    Send({ Target = msg.From, Data = \"Transfer is locked!\" })\n    return \"Transfer is locked\"\n  end\n  local status, err = pcall(function()\n    assert(type(msg.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\n    assert(bint(msg.Quantity) > bint(0), 'Quantity must be greater than 0')\n\n    if not Balances[msg.From] then Balances[msg.From] = \"0\" end\n    if not Balances[msg.Recipient] then Balances[msg.Recipient] = \"0\" end\n\n    if bint(msg.Quantity) <= bint(Balances[msg.From]) then\n      Balances[msg.From] = utils.subtract(Balances[msg.From], msg.Quantity)\n      Balances[msg.Recipient] = utils.add(Balances[msg.Recipient], msg.Quantity)\n\n      --[[\n          Only send the notifications to the Sender and Recipient\n          if the Cast tag is not set on the Transfer message\n        ]]\n      --\n      if not msg.Cast then\n        -- Debit-Notice message template, that is sent to the Sender of the transfer\n        local debitNotice = {\n          Target = msg.From,\n          Action = 'Debit-Notice',\n          Recipient = msg.Recipient,\n          Quantity = msg.Quantity,\n          Data = Colors.gray ..\n              \"You transferred \" ..\n              Colors.blue .. msg.Quantity .. Colors.gray .. \" to \" .. Colors.green .. msg.Recipient .. Colors.reset\n        }\n        -- Credit-Notice message template, that is sent to the Recipient of the transfer\n        local creditNotice = {\n          Target = msg.Recipient,\n          Action = 'Credit-Notice',\n          Sender = msg.From,\n          Quantity = msg.Quantity,\n          Data = Colors.gray ..\n              \"You received \" ..\n              Colors.blue .. msg.Quantity .. Colors.gray .. \" from \" .. Colors.green .. msg.From .. Colors.reset\n        }\n\n        -- Add forwarded tags to the credit and debit notice messages\n        for tagName, tagValue in pairs(msg) do\n          -- Tags beginning with \"X-\" are forwarded\n          if string.sub(tagName, 1, 2) == \"X-\" then\n            debitNotice[tagName] = tagValue\n            creditNotice[tagName] = tagValue\n          end\n        end\n\n        -- Send Debit-Notice and Credit-Notice\n        ao.send(debitNotice)\n        ao.send(creditNotice)\n      end\n    else\n      ao.send({\n        Target = msg.From,\n        Action = 'Transfer-Error',\n        ['Message-Id'] = msg.Id,\n        Error = 'Insufficient Balance!'\n      })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n--[[\n     Total Supply\n   ]]\n--\ntoken.totalSupply = function(msg)\n  assert(msg.From ~= ao.id, 'Cannot call Total-Supply from the same process!')\n\n  ao.send({\n    Target = msg.From,\n    Action = 'Total-Supply',\n    Data = TotalSupply,\n    Ticker = Ticker\n  })\nend\n\n--[[\n Burn\n]] --\ntoken.burn = function(msg)\n  assert(type(msg.Quantity) == 'string', 'Quantity is required!')\n  assert(bint(msg.Quantity) <= bint(Balances[msg.From]), 'Quantity must be less than or equal to the current balance!')\n\n  Balances[msg.From] = utils.subtract(Balances[msg.From], msg.Quantity)\n  TotalSupply = utils.subtract(TotalSupply, msg.Quantity)\n\n  ao.send({\n    Target = msg.From,\n    Data = Colors.gray .. \"Successfully burned \" .. Colors.blue .. msg.Quantity .. Colors.reset\n  })\nend\n\n\nreturn token\n\nend\n\n_G.package.loaded[\"token\"] = _loaded_mod_token()\n\n-- module: \"allocator\"\nlocal function _loaded_mod_allocator()\n  local allocator = { _version = \"0.0.1\" }\n\nlocal bint = require('.bint')(256)\n\n-- utility functions\nlocal function reduce(func, initial, t)\n    local result = initial\n    for _, v in ipairs(t) do\n        result = func(result, v)\n    end\n    return result\nend\n\nlocal function values(t)\n    local result = {}\n    for _, v in pairs(t) do\n        table.insert(result, v)\n    end\n    return result\nend\n\nlocal function keys(t)\n    local result = {}\n    for k, _ in pairs(t) do\n        table.insert(result, k)\n    end\n    return result\nend\n\nlocal function sum(t)\n    return reduce(function(a, b) return a + b end, 0, t)\nend\n\nlocal function mergeAll(tables)\n    local result = {}\n    for _, t in ipairs(tables) do\n        for k, v in pairs(t) do\n            result[k] = v\n        end\n    end\n    return result\nend\n\n\nfunction allocator.allocate(balances, reward)\n    local function add(a, b) return bint(a) + bint(b) end\n\n    -- Calculate total positive balances\n    local total = reduce(add, bint(0), values(balances))\n    \n    -- Allocate rewards based on balances\n    local allocation = mergeAll(\n        reduce(function(a, s)\n            local asset = s[1]\n            local balance = bint(s[2])\n            \n            if balance < bint(1) then\n                return a\n            end\n            \n            local pct = (balance / total) * bint(100)\n            local coins = math.floor(bint(reward) * (pct / bint(100)) + (bint(1) / bint(2))) -- Round to nearest integer\n            \n            table.insert(a, {[asset] = tostring(coins)})\n            return a\n        end, {}, (function()\n            local result = {}\n            for k, v in pairs(balances) do\n                table.insert(result, {k, v})\n            end\n            return result\n        end)())\n    )\n    \n    -- Handle off by one errors\n    local remainder = reward - sum(values(allocation))\n    local k = keys(allocation)\n    local i = 1\n    while remainder > 0 do\n        allocation[k[i]] = allocation[k[i]] + 1\n        remainder = remainder - 1\n        i = (i % #k) + 1\n    end\n    \n    return allocation\nend\n\nreturn allocator\n\nend\n\n_G.package.loaded[\"allocator\"] = _loaded_mod_allocator()\n\n-- module: \"mint\"\nlocal function _loaded_mod_mint()\n--[[\n  Mint Module handles the minting functions for AO Token\n\n]]\nlocal bint = require('.bint')(256)\nlocal sqlite3 = require('lsqlite3')\nlocal Allocator = require('allocator')\n\nlocal allocate = Allocator.allocate\nMintCount = MintCount or 0\nMintDb = MintDb or sqlite3.open_memory()\nlocal INSERT_ORACLE_SQL = \"INSERT INTO Oracles (Oracle, Name, StartTimestamp, DelayDepositInterval) VALUES (?, ?, ?, ?)\"\n-- DbAdmin Module is required\ndbAdmin = dbAdmin or require('@rakis/DbAdmin').new(MintDb)\n-- processes or wallets allowed to send event batches\nBatchesAllowed = BatchesAllowed or\n    { \"88T4YtovZ9ZDgEh1Xb0T_VlF9rXCRFOdi_B2Eyv1eMs\", \"w7PAoAtLRjE48eW1qoKt5n5rzCyeOxDTt6RbYwELxDU\" }\nLastMintHeight = LastMintHeight or \"1443785\"\nRewards = {}\n\nlocal utils = {\n  add = function(a, b)\n    if (bint(a) < bint(0)) then\n      a = 0\n    end\n    if (bint(b) < bint(0)) then\n      b = 0\n    end\n    return tostring(bint(a) + bint(b))\n  end,\n  subtract = function(a, b)\n    if bint(b) < bint(0) then\n      b = 0\n    end\n    local value = bint(a) - bint(b)\n    if value < bint(0) then\n      return \"0\"\n    else\n      return tostring(bint(a) - bint(b))\n    end\n  end,\n  toBalanceValue = function(a)\n    return tostring(bint(a))\n  end,\n  toNumber = function(a)\n    return tonumber(a)\n  end,\n  greaterThan = function(a, b)\n    return bint(a) > bint(b)\n  end\n}\n\nlocal mint = { _version = \"0.0.1\" }\n\nfunction DbApply(sql, values)\n  assert(type(sql) == 'string', 'SQL MUST be a String')\n  assert(type(values) == 'table', 'args MUST be an array of values')\n  local stmt = MintDb:prepare(sql)\n  stmt:bind_values(table.unpack(values))\n  if stmt:step() ~= sqlite3.DONE then\n    error(sql .. ' statement failed because ' .. MintDb:errmsg())\n  end\n  stmt:finalize()\nend\n\n-- local db functions\nlocal function insertOracle(oracle, name, startTimestamp, delayDepositInterval)\n  local stmt = MintDb:prepare(INSERT_ORACLE_SQL)\n\n  if stmt == nil then\n    error(\"Failed to prepare statement: \" .. MintDb:errmsg())\n  end\n\n  stmt:bind_values(oracle, name, startTimestamp, delayDepositInterval)\n\n  local result = stmt:step()\n  if result ~= sqlite3.DONE then\n    error(\"Failed to insert record: \" .. MintDb:errmsg())\n  end\n\n  stmt:finalize()\n  return result\nend\n\nlocal function insertDeposit(recipient, oracle, user, token, amount, updated)\n  -- Prepare the SQL select statement to check if the record exists\n  local select_stmt = MintDb:prepare(\"SELECT Amount FROM Rewards WHERE Recipient = ? AND Token = ?\")\n  select_stmt:bind_values(recipient, token)\n  local result = select_stmt:step()\n  local rewardAccountExists = false\n  local current_amount = 0\n  if result == sqlite3.ROW then\n    rewardAccountExists = true\n    current_amount = bint(select_stmt:get_value(0))\n  end\n  select_stmt:finalize()\n  local total_amount = utils.add(current_amount, amount)\n\n  if rewardAccountExists then\n    DbApply(\n      \"UPDATE Rewards SET Amount = ?, Updated = ? WHERE Recipient = ?\",\n      table.pack(total_amount, updated, recipient)\n    )\n  else\n    DbApply(\n      \"INSERT INTO Rewards (Recipient, Oracle, User, Token, Amount, Updated) VALUES (?, ?, ?, ?, ?, ?)\",\n      table.pack(recipient, oracle, user, token, total_amount, updated)\n    )\n  end\nend\n\nlocal function updateWithdraw(user, amount, updated, token)\n  -- Prepare the SQL select statement to check if the record exists\n  local select_stmt = MintDb:prepare(\"SELECT Amount FROM Rewards WHERE Recipient = ? and Token = ?\")\n  select_stmt:bind_values(user, token or \"AR\")\n  local result = select_stmt:step()\n\n  local current_amount = 0\n  if result == sqlite3.ROW then\n    current_amount = bint(select_stmt:get_value(0))\n  end\n  select_stmt:finalize()\n\n  -- Calculate the new total amount\n  local total_amount = utils.subtract(current_amount, amount)\n  if current_amount > 0 then\n    DbApply(\"UPDATE Rewards SET Amount = ?, Updated = ? WHERE Recipient = ?\", table.pack(total_amount, updated, user))\n  end\nend\n\n-- init database\nfunction mint.init()\n  MintDb:exec [[\nCREATE TABLE IF NOT EXISTS Oracles (\n  Oracle TEXT PRIMARY KEY,\n  Name TEXT NOT NULL,\n  StartTimestamp TEXT NOT NULL,\n  DelayDepositInterval TEXT NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS Rewards (\n  Recipient TEXT NOT NULL,\n  Token TEXT NOT NULL,\n  Oracle TEXT NOT NULL,\n  User TEXT NOT NULL,\n  Amount TEXT NOT NULL,\n  Updated TEXT NOT NULL,\n  PRIMARY KEY (Recipient, Token),\n  FOREIGN KEY (Oracle) REFERENCES Oracles(Oracle)\n);\n  ]]\n  return \"Mint Initialized.\"\nend\n\nfunction mint.isOracle(msg)\n  if not Utils.includes(msg.Owner, ao.authorities) then\n    return false\n  end\n  local oracle = msg.From\n\n  local stmt = MintDb:prepare(\"SELECT 1 FROM Oracles WHERE Oracle = ?\")\n  stmt:bind_values(oracle)\n  stmt:step()\n  local exists = (stmt:get_value(0) ~= nil)\n  stmt:finalize()\n  return exists\nend\n\n-- handle register Oracle\nfunction mint.registerOracle(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Oracle) == \"string\", \"Oracle is required!\")\n    assert(type(msg.Name) == \"string\", \"Name is required!\")\n    assert(type(msg.Start) == \"string\", \"Start Timestamp required!\")\n    assert(type(msg.DepositDelay) == \"string\", \"Deposit Delay is required\")\n    insertOracle(msg.Oracle, msg.Name, msg.Start, msg.DepositDelay)\n    Send({ Target = msg.From, Data = \"registered.\" })\n  end)\n  if err then\n    print(err)\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle Deposit request\nfunction mint.handleDeposit(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Tags.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.User) == \"string\", \"User is required!\")\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    assert(type(msg.TokenAmount) == \"string\", \"TokenAmount is required!\")\n    assert(type(msg.Reward) == \"string\", \"Reward is required!\")\n    assert(type(msg.TransactionHash) == \"string\", \"TransactionHash is required!\")\n    -- assert(type(msg.Tags.Timestamp) == \"string\", \"Timestamp is required!\")\n    insertDeposit(msg.Recipient, msg.From, msg.User, msg.Token, msg.TokenAmount, msg.Timestamp)\n    -- Send({ Target = msg.From, Action = \"Deposit-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    if msg.User ~= msg.Recipient then\n      Send({ Target = msg.Recipient, Action = \"Deposit-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle Withdraw request\nfunction mint.handleWithdraw(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Tags.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.User) == \"string\", \"User is required!\")\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    assert(type(msg.TokenAmount) == \"string\", \"TokenAmount is required!\")\n    assert(type(msg.Reward) == \"string\", \"Reward is required!\")\n    assert(type(msg.TransactionHash) == \"string\", \"TransactionHash is required!\")\n    -- assert(type(msg.Tags.Timestamp) == \"string\", \"Timestamp is required!\")\n    updateWithdraw(msg.Recipient, msg.TokenAmount, msg.Timestamp, msg.Token)\n    -- Send({ Target = msg.From, Action = \"Withdraw-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    if msg.User ~= msg.Recipient then\n      Send({ Target = msg.Recipient, Action = \"Withdraw-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle OverPlus reward distribution\nfunction mint.handleOverPlus(msg)\n  -- TODO:\nend\n\nlocal function split_by_linefeed(str)\n  local result = {}\n  for line in str:gmatch(\"[^\\r\\n]+\") do\n    table.insert(result, line)\n  end\n  return result\nend\n\nlocal function split_by_comma(str)\n  local result = {}\n  for line in str:gmatch(\"[^,]+\") do\n    table.insert(result, line)\n  end\n  return result\nend\n\n-- Handle Batch Deposits mainly for loading WalletList\nfunction mint.Batch(msg)\n  local status, err = pcall(function()\n    if msg.Height and LastMintHeight >= msg.Height then\n      print(\"Already Applied Block: \" .. msg.Height)\n      return \"OK\"\n    end\n    if msg.Height then\n      print(\"Height: \" .. msg.Height)\n      LastMintHeight = msg.Height\n    end\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    -- Batch can be in two formats\n    -- 1. Address:Balance KeyValue\n    -- 2. Mint Event Transactions \"Format = 'Event-List'\"\n    if msg.Format and msg.Format == \"Event-List\" then\n      print('Format: ' .. msg.Format)\n      -- event list\n      local events = require('json').decode(msg.Data)\n      print(string.format(\"Received %d events to process\", #events))\n      for i = 1, #events do\n        local event = events[i]\n        if event.Action == \"Deposit\" then\n          -- print(string.format('Deposited %s for %s', event.TokenAmount, event.Recipient))\n          insertDeposit(event.Recipient, msg.From, event.User, event.Token, event.TokenAmount, msg.Timestamp)\n        elseif event.Action == \"Withdraw\" then\n          local total = utils.add(event.TokenAmount, event.Fee or \"0\")\n          -- print(string.format(\"Withdraw %s for %s\", total, event.User))\n          updateWithdraw(event.User, total, event.Timestamp, \"AR\")\n        end\n      end\n    elseif msg.Format and msg.Format == \"Event-List-CSV\" then\n      local lines = split_by_linefeed(msg.Data)\n      for i = 1, #lines do\n        local fields = split_by_comma(lines[i])\n        local event = {\n          Action = fields[1],\n          Recipient = fields[2],\n          Reward = fields[3],\n          Fee = fields[4],\n          Timestamp = fields[5]\n        }\n        if event.Action == \"Deposit\" then\n          insertDeposit(event.Recipient, msg.From, event.Recipient, \"AR\", event.Reward, event.Timestamp)\n        elseif event.Action == \"Withdraw\" then\n          local total = utils.add(event.Reward or \"0\", event.Fee or \"0\")\n          updateWithdraw(event.Recipient, total, event.Timestamp)\n        end\n        -- print('Processed: ' .. lines[i])\n      end\n      return #lines\n    else\n      -- do key/value\n      local deposits = require('json').decode(msg.Data)\n      for k, v in pairs(deposits) do\n        print('insert deposit: ' .. v .. ' to ' .. k)\n        insertDeposit(k, msg.From, k, msg.Token, v, msg.Timestamp)\n      end\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\nfunction mint.LoadBalances(msg)\n  local status, err = pcall(function()\n    local deposits = require('json').decode(msg.Data)\n    for k, v in pairs(deposits) do\n      print('initialize balance: ' .. v .. ' to ' .. k)\n      Balances[k] = v\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Mint\nfunction mint.Mint(msg)\n  local status, err = pcall(function()\n    if msg.Action == \"Cron\" and MODE == \"OFF\" then\n      print(\"Not Minting by CRON untils MODE is set to ON\")\n      return \"OK\"\n    end\n\n    print('Minting Every 5 minutes!')\n    -- Get Reward List\n    local list = Utils.reduce(\n      function(acc, item)\n        acc[item.Recipient] = item.Amount\n        return acc\n      end,\n      {},\n      dbAdmin:exec [[select Recipient, Amount from Rewards;]]\n    )\n    -- Get Remaining Supply\n    local remainingSupply = utils.subtract(TotalSupply, MintedSupply)\n    -- Get Reward Percent\n    local reward = string.format('%.0f', bint(remainingSupply) * ARM_Mint_PCT)\n    -- Allocate Rewards\n    local rewards = allocate(list, reward)\n    -- Update Balances\n    for k, v in pairs(rewards) do\n      if not Balances[k] then\n        Balances[k] = \"0\"\n      end\n      Balances[k] = utils.add(Balances[k], v)\n      -- print(\"Address: \" .. k .. \" Balance \" .. Balances[k])\n      -- supply = utils.add(supply, Balances[k])\n    end\n    -- Calculate Circulating Supply\n    MintedSupply = Utils.reduce(function(a, b) return tostring(bint(a) + bint(b)) end, \"0\", Utils.values(Balances))\n    MintCount = MintCount + 1\n\n    print(\"Total Minted Supply\" .. MintedSupply)\n    print(\"Mints: \" .. MintCount)\n\n    LastMintTimestamp = msg.Timestamp\n  end)\n  if err then\n    print(err)\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return string.format([[\n  Total Minted Supply: %s\n  Mints: %s\n  ]], MintedSupply, MintCount)\nend\n\n-- matchers\nfunction mint.isRegister(msg)\n  return ao.id == msg.From and ao.isTrusted(msg) and msg.Action == \"Oracle.Register\"\nend\n\nfunction mint.isDeposit(msg)\n  return msg.Action == \"Deposit\" and mint.isOracle(msg)\nend\n\nfunction mint.isWithdraw(msg)\n  return msg.Action == \"Withdraw\" and mint.isOracle(msg)\nend\n\nfunction mint.isOverPlus(msg)\n  return msg.Action == \"OverPlus\" and mint.isOracle(msg)\nend\n\nfunction mint.isBatch(msg)\n  -- return msg.Action == \"Mint.Batch\" and MODE == \"OFF\" and msg.Owner == \"w7PAoAtLRjE48eW1qoKt5n5rzCyeOxDTt6RbYwELxDU\"\n  return msg.Action == \"Mint.Batch\" and Utils.includes(msg.From, BatchesAllowed)\nend\n\nfunction mint.isLoadBalances(msg)\n  return msg.Action == \"Mint.LoadBalances\" and Utils.includes(msg.From, BatchesAllowed)\nend\n\nfunction mint.isCron(msg)\n  return msg.Action == \"Cron\" and msg.From == \"gCpQfnG6nWLlKs8jYgV8oUfe38GYrPLv59AC7LCtCGg\"\nend\n\nreturn mint\n\nend\n\n_G.package.loaded[\"mint\"] = _loaded_mod_mint()\n\n--[[\n  AO Token uses the local token contract\n]]\nlocal token = require('token')\nlocal bint = require('.bint')(256)\n\n-- LastMintTimestamp\nLastMintTimestamp = LastMintTimestamp or 0\n-- MODE - OFF = Manual Minting only, ON = Automated Minting\nMODE = MODE or \"OFF\"\n\n-- Circulating Supply\nMintedSupply = MintedSupply or \"0\"\n-- 5 MIN REWARD SUPPLY PERCENT\nAR_Mint_PCT = bint(\"1647321875\") / bint(\"1000\")\nARM_Mint_PCT = AR_Mint_PCT / bint(\"1000000000000\")\n\nMint = require('mint')\n\nHandlers.add('mint.register', Mint.isRegister, Mint.registerOracle)\nHandlers.add('mint.deposit', Mint.isDeposit, Mint.handleDeposit)\nHandlers.add('mint.withdraw', Mint.isWithdraw, Mint.handleWithdraw)\n\nHandlers.add('cron.mint', Mint.isCron, Mint.Mint)\nHandlers.add('mint.batch', Mint.isBatch, Mint.Batch)\nHandlers.add('mint.loadbalances', Mint.isLoadBalances, Mint.LoadBalances)\n\nHandlers.add('token.info',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Info\"),\n  token.info\n)\n\nHandlers.add('token.balance',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Balance\"),\n  token.balance\n)\n\nHandlers.add('token.balances',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Balances\"),\n  token.balances\n)\n\nHandlers.add('token.transfer',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Transfer\"),\n  token.transfer\n)\n\nHandlers.add('token.totalSupply',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Total-Supply\"),\n  token.totalSupply\n)\n\nHandlers.add('token.burn',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Burn\"),\n  token.burn\n)\n\nHandlers.add('token.mintedSupply',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Minted-Supply\"),\n  function(msg)\n    Send({ Target = msg.From, Data = MintedSupply })\n    print(\"Id: \" .. msg.From .. \" Requested Minted Supply: \" .. MintedSupply)\n  end\n)\n\n-- need to create this in aos\n--[[\nNeed to implement this in aos to always run this handler no matter what at the end.\n\nHandlers.always('mint.automatic', function (msg)\n  local Now = msg.Timestamp\n  if MODE == \"ON\" then\n     if Now > LastMintTimestamp + FIVE_MINUTES and Now < LastMintTimestamp + TEN_MINUTES then\n       Mint\n     end\n     Mint.Mint(msg)\n     return \"ok\"\n  end\n\nend)\n]]\n\nreturn 2\n"
            }
        },
        "cursor": "1718392014405"
    },
    {
        "node": {
            "message": {
                "id": "3Aq95b8vSBZxgxdVDswryX8tUpGkRrmb7eI-qyF8lmk",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718391999867"
    },
    {
        "node": {
            "message": {
                "id": "4RNyMKl-jXV7WSdDqlFyFXFH2b3GAr83oMxSDFYbl6c",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintedSupply"
            }
        },
        "cursor": "1718391858864"
    },
    {
        "node": {
            "message": {
                "id": "6gF_NtHuya67CMt0HjHZmFb9OIfoPW0y5kvjgHg_VRU",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintedSupply = \"1048016266738706818\""
            }
        },
        "cursor": "1718391845014"
    },
    {
        "node": {
            "message": {
                "id": "-5mqCFXKZVc97_sjdyaXCY-oWnTZT5csj4sFlPpxHLE",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Utils.reduce(function(a, b) return tostring(bint(a) + bint(b)) end, \"0\", Utils.values(Balances))"
            }
        },
        "cursor": "1718391817190"
    },
    {
        "node": {
            "message": {
                "id": "hCyJV9ZxbCrT51xH2U75J-IiGRkLiog8O6GiqUO1sOM",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "bint = require('.bint')(256)"
            }
        },
        "cursor": "1718391812609"
    },
    {
        "node": {
            "message": {
                "id": "S0I6ukL4_9fCStnzrHONPD4VMstrobcs1rBfg83hAJc",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintedSupply"
            }
        },
        "cursor": "1718391767947"
    },
    {
        "node": {
            "message": {
                "id": "ipkq0eCiU9ykekhHbLc499b4TIJVQ0aa0AjZl0g07XE",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintCount = 31077"
            }
        },
        "cursor": "1718391699714"
    },
    {
        "node": {
            "message": {
                "id": "chv9-_sQSxtgYQmdfFHiPGF36wO5cswQtXAXMQyGBjI",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "dbAdmin:exec[[select count(*) from Rewards;]]"
            }
        },
        "cursor": "1718391271578"
    },
    {
        "node": {
            "message": {
                "id": "Tv2F9qvmoI-q7iA03eKkiMgo425UxjQUZWaxjlCQyYw",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "dbAdmin:exec[[delete from Rewards;]]"
            }
        },
        "cursor": "1718390612449"
    },
    {
        "node": {
            "message": {
                "id": "7N_qgcUn6kNR03oQcBTkrWozZLDkJq67D0UuPkp3R6M",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "ao.id"
            }
        },
        "cursor": "1718390430687"
    },
    {
        "node": {
            "message": {
                "id": "7jrXOZlMftcAsXnM8TUeAqTv4EnpXYs5TmCesfVYBM4",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "dbAdmin:exec[[select * from Oracles;]]"
            }
        },
        "cursor": "1718389647660"
    },
    {
        "node": {
            "message": {
                "id": "UTxOEP0C5sunPS0IOz_DJLKSF1kerV8ld45TYzahSnk",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Send({Target = \"0_FnmJQlGLRa5Cldw7Ag_PtcdVSuUr_XdPmGB_avxnQ\", Data = Balances })"
            }
        },
        "cursor": "1718388847612"
    },
    {
        "node": {
            "message": {
                "id": "gnWyvXZrigP0zdqhvrbxLaCfIl8_Q6WEM0Y3KsaPlj8",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718388778707"
    },
    {
        "node": {
            "message": {
                "id": "84Ue5oMsX6NjA2E2bOIedj-v_Ll1kPGDvJG5EF-iOSM",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Send({Target = ao.id, Action = \"Minted-Supply\"})"
            }
        },
        "cursor": "1718372983518"
    },
    {
        "node": {
            "message": {
                "id": "3LxKT0nyvyIKCFmfGDI6PszwNhK-gc5GiLyIr2FcGCk",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintedSupply"
            }
        },
        "cursor": "1718372891633"
    },
    {
        "node": {
            "message": {
                "id": "LBvUKHZrWQwJKZsMV3CHkKaOEzYZSGnRAHMr4_Axjjs",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Balances[\"vh-NTHVvlKZqRxc8LyyTNok65yQ55a_PJ1zWLb9G2JI\"]"
            }
        },
        "cursor": "1718372821736"
    },
    {
        "node": {
            "message": {
                "id": "mCDeAhwq6jov76SM4OEJxw7U1SfSffCMAGCaDnLfMAc",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Send({Target = ao.id, Action = \"Balance\", Recipient = \"vh-NTHVvlKZqRxc8LyyTNok65yQ55a_PJ1zWLb9G2JI\"})"
            }
        },
        "cursor": "1718372792906"
    },
    {
        "node": {
            "message": {
                "id": "G1R69EoFau_Ql2zN7l5h-ofURDwII8wVAgASH0SVIuc",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Prompt = function () return tostring(MintCount) .. \" ao> \" end"
            }
        },
        "cursor": "1718367217558"
    },
    {
        "node": {
            "message": {
                "id": "5KJ68Ix_rnzhEHuVNZ9ljB_5DjZ0CAPq4UEfqZpzG-4",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Prompt = function() return \"ao> \" end"
            }
        },
        "cursor": "1718367106607"
    },
    {
        "node": {
            "message": {
                "id": "9oGcFJUFpKI1GMISlW2QnSNGNTGNw6thgsV7WS-_iLE",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "ao.id"
            }
        },
        "cursor": "1718367041505"
    },
    {
        "node": {
            "message": {
                "id": "1e0UlP2rxhpqnDZwcYyHUGoGBJOkT1VxYPJgVWd_JTc",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "ao.id"
            }
        },
        "cursor": "1718319379802"
    },
    {
        "node": {
            "message": {
                "id": "8PRaLRgJIp2e4XFbwRgiKDj7Mw-pTgve1U8m1EMzxXk",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Balances[\"[Object Object]\"]"
            }
        },
        "cursor": "1718318366767"
    },
    {
        "node": {
            "message": {
                "id": "vjg63fCPFJHrH6p6_-tNbJqGhVVt3VYscGnsq32oTfo",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Balances[\"[Object Object]\""
            }
        },
        "cursor": "1718318362634"
    },
    {
        "node": {
            "message": {
                "id": "QCYpDIQfwGbn2_Clv--dsKvFmBsRsmCN0zvdR9QgwIU",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "ao.id"
            }
        },
        "cursor": "1718317539457"
    },
    {
        "node": {
            "message": {
                "id": "opC-CQ7JwnJKXdxOagN9e8xZaDc_DPbwElCRmKtGuZU",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "dbAdmin:exec[[select count(*) from Oracles;]]"
            }
        },
        "cursor": "1718317527981"
    },
    {
        "node": {
            "message": {
                "id": "y28qvnuMJCWXFj-YgMvoKc0scRJEYHil1uwdYI8QxjM",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Send({\n  Target = ao.id,\n  Action = \"Oracle.Register\",\n  Oracle = \"0_FnmJQlGLRa5Cldw7Ag_PtcdVSuUr_XdPmGB_avxnQ\",\n  Name = \"AR\",\n  Start = \"1718207056844\",\n  DepositDelay = \"0\"\n})\n"
            }
        },
        "cursor": "1718317506156"
    },
    {
        "node": {
            "message": {
                "id": "dCSJNl09BIos4T7hEzjJmwVnDZzRGgjnu5aI8hPsfYI",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "\n\n-- module: \"token\"\nlocal function _loaded_mod_token()\nlocal token = { _version = \"0.0.4\" }\n\nlocal json = require('json')\nlocal bint = require('.bint')(256)\nlocal ao = require('ao')\n\nlocal utils = {\n  add = function(a, b)\n    return tostring(bint(a) + bint(b))\n  end,\n  subtract = function(a, b)\n    return tostring(bint(a) - bint(b))\n  end,\n  toBalanceValue = function(a)\n    return tostring(bint(a))\n  end,\n  toNumber = function(a)\n    return tonumber(a)\n  end\n}\n\n--[[\n     Initialize State\n\n     ao.id is equal to the Process.Id\n   ]]\n--\nVariant = \"0.0.3\"\n\n-- token should be idempotent and not change previous state updates\nDenomination = Denomination or 12\nBalances = Balances or {}\n-- 21_000_000 AO Tokens\n-- 21_000_000_000_000_000_000 Armstrongs\nTotalSupply = \"21000000000000000000\"\nName = 'AO'\nTicker = 'AO'\nLogo = Logo or 'SBCCXwwecBlDqRLUjb8dYABExTJXLieawf7m2aBJ-KY'\n\n\n--[[\n     Add handlers for each incoming Action defined by the ao Standard Token Specification\n   ]]\n--\n\n--[[\n     Info\n   ]]\n--\ntoken.info = function(msg)\n  ao.send({\n    Target = msg.From,\n    Name = Name,\n    Ticker = Ticker,\n    Logo = Logo,\n    Denomination = tostring(Denomination)\n  })\nend\n\n\n--[[\n     Balance\n   ]]\n--\ntoken.balance = function(msg)\n  local bal = '0'\n\n  -- If not Recipient is provided, then return the Senders balance\n  if (msg.Tags.Recipient and Balances[msg.Tags.Recipient]) then\n    bal = Balances[msg.Tags.Recipient]\n  elseif msg.Tags.Target and Balances[msg.Tags.Target] then\n    bal = Balances[msg.Tags.Target]\n  elseif Balances[msg.From] then\n    bal = Balances[msg.From]\n  end\n\n  ao.send({\n    Target = msg.From,\n    Balance = bal,\n    Ticker = Ticker,\n    Account = msg.Tags.Recipient or msg.From,\n    Data = bal\n  })\nend\n\n--[[\n     Balances\n   ]]\n--\ntoken.balances = function(msg)\n  ao.send({ Target = msg.From, Data = Balances })\nend\n--[[\n     Transfer\n   ]]\n--\ntoken.transfer = function(msg)\n  if MintCount < 100000 then\n    Send({ Target = msg.From, Data = \"Transfer is locked!\" })\n    return \"Transfer is locked\"\n  end\n  local status, err = pcall(function()\n    assert(type(msg.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\n    assert(bint(msg.Quantity) > bint(0), 'Quantity must be greater than 0')\n\n    if not Balances[msg.From] then Balances[msg.From] = \"0\" end\n    if not Balances[msg.Recipient] then Balances[msg.Recipient] = \"0\" end\n\n    if bint(msg.Quantity) <= bint(Balances[msg.From]) then\n      Balances[msg.From] = utils.subtract(Balances[msg.From], msg.Quantity)\n      Balances[msg.Recipient] = utils.add(Balances[msg.Recipient], msg.Quantity)\n\n      --[[\n          Only send the notifications to the Sender and Recipient\n          if the Cast tag is not set on the Transfer message\n        ]]\n      --\n      if not msg.Cast then\n        -- Debit-Notice message template, that is sent to the Sender of the transfer\n        local debitNotice = {\n          Target = msg.From,\n          Action = 'Debit-Notice',\n          Recipient = msg.Recipient,\n          Quantity = msg.Quantity,\n          Data = Colors.gray ..\n              \"You transferred \" ..\n              Colors.blue .. msg.Quantity .. Colors.gray .. \" to \" .. Colors.green .. msg.Recipient .. Colors.reset\n        }\n        -- Credit-Notice message template, that is sent to the Recipient of the transfer\n        local creditNotice = {\n          Target = msg.Recipient,\n          Action = 'Credit-Notice',\n          Sender = msg.From,\n          Quantity = msg.Quantity,\n          Data = Colors.gray ..\n              \"You received \" ..\n              Colors.blue .. msg.Quantity .. Colors.gray .. \" from \" .. Colors.green .. msg.From .. Colors.reset\n        }\n\n        -- Add forwarded tags to the credit and debit notice messages\n        for tagName, tagValue in pairs(msg) do\n          -- Tags beginning with \"X-\" are forwarded\n          if string.sub(tagName, 1, 2) == \"X-\" then\n            debitNotice[tagName] = tagValue\n            creditNotice[tagName] = tagValue\n          end\n        end\n\n        -- Send Debit-Notice and Credit-Notice\n        ao.send(debitNotice)\n        ao.send(creditNotice)\n      end\n    else\n      ao.send({\n        Target = msg.From,\n        Action = 'Transfer-Error',\n        ['Message-Id'] = msg.Id,\n        Error = 'Insufficient Balance!'\n      })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n--[[\n     Total Supply\n   ]]\n--\ntoken.totalSupply = function(msg)\n  assert(msg.From ~= ao.id, 'Cannot call Total-Supply from the same process!')\n\n  ao.send({\n    Target = msg.From,\n    Action = 'Total-Supply',\n    Data = TotalSupply,\n    Ticker = Ticker\n  })\nend\n\n--[[\n Burn\n]] --\ntoken.burn = function(msg)\n  assert(type(msg.Quantity) == 'string', 'Quantity is required!')\n  assert(bint(msg.Quantity) <= bint(Balances[msg.From]), 'Quantity must be less than or equal to the current balance!')\n\n  Balances[msg.From] = utils.subtract(Balances[msg.From], msg.Quantity)\n  TotalSupply = utils.subtract(TotalSupply, msg.Quantity)\n\n  ao.send({\n    Target = msg.From,\n    Data = Colors.gray .. \"Successfully burned \" .. Colors.blue .. msg.Quantity .. Colors.reset\n  })\nend\n\n\nreturn token\n\nend\n\n_G.package.loaded[\"token\"] = _loaded_mod_token()\n\n-- module: \"allocator\"\nlocal function _loaded_mod_allocator()\n  local allocator = { _version = \"0.0.1\" }\n\nlocal bint = require('.bint')(256)\n\n-- utility functions\nlocal function reduce(func, initial, t)\n    local result = initial\n    for _, v in ipairs(t) do\n        result = func(result, v)\n    end\n    return result\nend\n\nlocal function values(t)\n    local result = {}\n    for _, v in pairs(t) do\n        table.insert(result, v)\n    end\n    return result\nend\n\nlocal function keys(t)\n    local result = {}\n    for k, _ in pairs(t) do\n        table.insert(result, k)\n    end\n    return result\nend\n\nlocal function sum(t)\n    return reduce(function(a, b) return a + b end, 0, t)\nend\n\nlocal function mergeAll(tables)\n    local result = {}\n    for _, t in ipairs(tables) do\n        for k, v in pairs(t) do\n            result[k] = v\n        end\n    end\n    return result\nend\n\n\nfunction allocator.allocate(balances, reward)\n    local function add(a, b) return bint(a) + bint(b) end\n\n    -- Calculate total positive balances\n    local total = reduce(add, bint(0), values(balances))\n    \n    -- Allocate rewards based on balances\n    local allocation = mergeAll(\n        reduce(function(a, s)\n            local asset = s[1]\n            local balance = bint(s[2])\n            \n            if balance < bint(1) then\n                return a\n            end\n            \n            local pct = (balance / total) * bint(100)\n            local coins = math.floor(bint(reward) * (pct / bint(100)) + (bint(1) / bint(2))) -- Round to nearest integer\n            \n            table.insert(a, {[asset] = tostring(coins)})\n            return a\n        end, {}, (function()\n            local result = {}\n            for k, v in pairs(balances) do\n                table.insert(result, {k, v})\n            end\n            return result\n        end)())\n    )\n    \n    -- Handle off by one errors\n    local remainder = reward - sum(values(allocation))\n    local k = keys(allocation)\n    local i = 1\n    while remainder > 0 do\n        allocation[k[i]] = allocation[k[i]] + 1\n        remainder = remainder - 1\n        i = (i % #k) + 1\n    end\n    \n    return allocation\nend\n\nreturn allocator\n\nend\n\n_G.package.loaded[\"allocator\"] = _loaded_mod_allocator()\n\n-- module: \"mint\"\nlocal function _loaded_mod_mint()\n--[[\n  Mint Module handles the minting functions for AO Token\n\n]]\nlocal bint = require('.bint')(256)\nlocal sqlite3 = require('lsqlite3')\nlocal Allocator = require('allocator')\n\nlocal allocate = Allocator.allocate\nMintCount = MintCount or 0\nMintDb = MintDb or sqlite3.open_memory()\nlocal INSERT_ORACLE_SQL = \"INSERT INTO Oracles (Oracle, Name, StartTimestamp, DelayDepositInterval) VALUES (?, ?, ?, ?)\"\n-- DbAdmin Module is required\ndbAdmin = dbAdmin or require('@rakis/DbAdmin').new(MintDb)\n-- processes or wallets allowed to send event batches\nBatchesAllowed = BatchesAllowed or\n    { \"88T4YtovZ9ZDgEh1Xb0T_VlF9rXCRFOdi_B2Eyv1eMs\", \"w7PAoAtLRjE48eW1qoKt5n5rzCyeOxDTt6RbYwELxDU\" }\nLastMintHeight = LastMintHeight or \"1443785\"\nRewards = {}\n\nlocal utils = {\n  add = function(a, b)\n    if (bint(a) < bint(0)) then\n      a = 0\n    end\n    if (bint(b) < bint(0)) then\n      b = 0\n    end\n    return tostring(bint(a) + bint(b))\n  end,\n  subtract = function(a, b)\n    if bint(b) < bint(0) then\n      b = 0\n    end\n    local value = bint(a) - bint(b)\n    if value < bint(0) then\n      return \"0\"\n    else\n      return tostring(bint(a) - bint(b))\n    end\n  end,\n  toBalanceValue = function(a)\n    return tostring(bint(a))\n  end,\n  toNumber = function(a)\n    return tonumber(a)\n  end,\n  greaterThan = function(a, b)\n    return bint(a) > bint(b)\n  end\n}\n\nlocal mint = { _version = \"0.0.1\" }\n\n-- local db functions\nlocal function insertOracle(oracle, name, startTimestamp, delayDepositInterval)\n  local stmt = MintDb:prepare(INSERT_ORACLE_SQL)\n\n  if stmt == nil then\n    error(\"Failed to prepare statement: \" .. MintDb:errmsg())\n  end\n\n  stmt:bind_values(oracle, name, startTimestamp, delayDepositInterval)\n\n  local result = stmt:step()\n  if result ~= sqlite3.DONE then\n    error(\"Failed to insert record: \" .. MintDb:errmsg())\n  end\n\n  stmt:finalize()\nend\n\nlocal function insertDeposit(recipient, oracle, user, token, amount, updated)\n  -- Prepare the SQL select statement to check if the record exists\n  local select_stmt = MintDb:prepare(\"SELECT Amount FROM Rewards WHERE Recipient = ? AND Token = ?\")\n  select_stmt:bind_values(recipient, token)\n  local result = select_stmt:step()\n\n  print(string.format(\"Adding Deposit to %s in the amount of %s for Token %s\", recipient, amount, token))\n  local rewardAccountExists = false\n  local current_amount = 0\n  if result == sqlite3.ROW then\n    rewardAccountExists = true\n    current_amount = bint(select_stmt:get_value(0))\n  end\n  select_stmt:finalize()\n\n  print(string.format(\"Current Amount %s\", current_amount))\n  --error(\"Current: \" .. current_amount .. \" amount: \" .. amount)\n  -- Calculate the new total amount\n  local total_amount = utils.add(current_amount, amount)\n\n  print(string.format(\"Total Amount %s\", total_amount))\n  if rewardAccountExists then\n    -- print(\"Adding Deposit\")\n    -- Prepare the SQL update statement to update the existing record\n    local update_stmt = MintDb:prepare(\"UPDATE Rewards SET Amount = ?, Updated = ? WHERE Recipient = ?\")\n    update_stmt:bind_values(total_amount, updated, recipient)\n    local update_result = update_stmt:step()\n    if update_result ~= sqlite3.DONE then\n      print(\"Failed to update record: \" .. MintDb:errmsg())\n    end\n    update_stmt:finalize()\n    -- print(\"Finish Update\")\n  else\n    -- print(\"Insert Deposit\")\n    -- Prepare the SQL insert statement to insert a new record\n    local insert_stmt = MintDb:prepare(\n      \"INSERT INTO Rewards (Recipient, Oracle, User, Token, Amount, Updated) VALUES (?, ?, ?, ?, ?, ?)\")\n    insert_stmt:bind_values(recipient, oracle, user, token, total_amount, updated)\n    local insert_result = insert_stmt:step()\n    if insert_result ~= sqlite3.DONE then\n      print(\"Failed to insert record: \" .. MintDb:errmsg())\n    end\n    insert_stmt:finalize()\n    -- print(\"Finish Deposit\")\n  end\nend\n\nlocal function updateWithdraw(user, amount, updated)\n  -- Prepare the SQL select statement to check if the record exists\n  local select_stmt = MintDb:prepare(\"SELECT Amount FROM Rewards WHERE Recipient = ? and Token = ?\")\n  select_stmt:bind_values(user, \"AR\")\n  local result = select_stmt:step()\n\n  local current_amount = 0\n  if result == sqlite3.ROW then\n    current_amount = bint(select_stmt:get_value(0))\n  end\n  select_stmt:finalize()\n\n  -- Calculate the new total amount\n  local total_amount = utils.subtract(current_amount, amount)\n  print(string.format(\"Withdraw from %s in the amount of %s leaves %s\", user, amount, total_amount))\n  if current_amount > 0 then\n    -- print(\"Updating Withdraw\")\n    -- Prepare the SQL update statement to update the existing record\n    local update_stmt = MintDb:prepare(\"UPDATE Rewards SET Amount = ?, Updated = ? WHERE User = ?\")\n    update_stmt:bind_values(total_amount, updated, user)\n    local update_result = update_stmt:step()\n    if update_result ~= sqlite3.DONE then\n      print(\"Failed to update record: \" .. MintDb:errmsg())\n    end\n    update_stmt:finalize()\n    -- print(\"Finish Update\")\n  end\nend\n\n-- init database\nfunction mint.init()\n  MintDb:exec [[\nCREATE TABLE IF NOT EXISTS Oracles (\n  Oracle TEXT PRIMARY KEY,\n  Name TEXT NOT NULL,\n  StartTimestamp TEXT NOT NULL,\n  DelayDepositInterval TEXT NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS Rewards (\n  Recipient TEXT NOT NULL,\n  Token TEXT NOT NULL,\n  Oracle TEXT NOT NULL,\n  User TEXT NOT NULL,\n  Amount TEXT NOT NULL,\n  Updated TEXT NOT NULL,\n  PRIMARY KEY (Recipient, Token),\n  FOREIGN KEY (Oracle) REFERENCES Oracles(Oracle)\n);\n  ]]\n  return \"Mint Initialized.\"\nend\n\nfunction mint.isOracle(msg)\n  if not Utils.includes(msg.Owner, ao.authorities) then\n    return false\n  end\n  local oracle = msg.From\n\n  local stmt = MintDb:prepare(\"SELECT 1 FROM Oracles WHERE Oracle = ?\")\n  stmt:bind_values(oracle)\n  stmt:step()\n  local exists = (stmt:get_value(0) ~= nil)\n  stmt:finalize()\n  return exists\nend\n\n-- handle register Oracle\nfunction mint.registerOracle(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Oracle) == \"string\", \"Oracle is required!\")\n    assert(type(msg.Name) == \"string\", \"Name is required!\")\n    assert(type(msg.Start) == \"string\", \"Start Timestamp required!\")\n    assert(type(msg.DepositDelay) == \"string\", \"Deposit Delay is required\")\n    insertOracle(msg.Oracle, msg.Name, msg.Start, msg.DepositDelay)\n    Send({ Target = msg.From, Data = \"registered.\" })\n  end)\n  if err then\n    print(err)\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle Deposit request\nfunction mint.handleDeposit(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Tags.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.User) == \"string\", \"User is required!\")\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    assert(type(msg.TokenAmount) == \"string\", \"TokenAmount is required!\")\n    assert(type(msg.Reward) == \"string\", \"Reward is required!\")\n    assert(type(msg.TransactionHash) == \"string\", \"TransactionHash is required!\")\n    -- assert(type(msg.Tags.Timestamp) == \"string\", \"Timestamp is required!\")\n    insertDeposit(msg.Recipient, msg.From, msg.User, msg.Token, msg.TokenAmount, msg.Timestamp)\n    Send({ Target = msg.From, Action = \"Deposit-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    if msg.User ~= msg.Recipient then\n      Send({ Target = msg.Recipient, Action = \"Deposit-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle Withdraw request\nfunction mint.handleWithdraw(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Tags.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.User) == \"string\", \"User is required!\")\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    assert(type(msg.TokenAmount) == \"string\", \"TokenAmount is required!\")\n    assert(type(msg.Reward) == \"string\", \"Reward is required!\")\n    assert(type(msg.TransactionHash) == \"string\", \"TransactionHash is required!\")\n    -- assert(type(msg.Tags.Timestamp) == \"string\", \"Timestamp is required!\")\n    updateWithdraw(msg.Recipient, msg.TokenAmount, msg.Timestamp)\n    Send({ Target = msg.From, Action = \"Withdraw-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    if msg.User ~= msg.Recipient then\n      Send({ Target = msg.Recipient, Action = \"Withdraw-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle OverPlus reward distribution\nfunction mint.handleOverPlus(msg)\n  -- TODO:\nend\n\nlocal function split_by_linefeed(str)\n  local result = {}\n  for line in str:gmatch(\"[^\\r\\n]+\") do\n    table.insert(result, line)\n  end\n  return result\nend\n\nlocal function split_by_comma(str)\n  local result = {}\n  for line in str:gmatch(\"[^,]+\") do\n    table.insert(result, line)\n  end\n  return result\nend\n\n-- Handle Batch Deposits mainly for loading WalletList\nfunction mint.Batch(msg)\n  local status, err = pcall(function()\n    if msg.Height and LastMintHeight >= msg.Height then\n      print(\"Already Applied Block: \" .. msg.Height)\n      return \"OK\"\n    end\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    -- Batch can be in two formats\n    -- 1. Address:Balance KeyValue\n    -- 2. Mint Event Transactions \"Format = 'Event-List'\"\n    if msg.Format and msg.Format == \"Event-List\" then\n      print('Format: ' .. msg.Format)\n      -- event list\n      local events = require('json').decode(msg.Data)\n      print(string.format(\"Received %d events to process\", #events))\n      for i = 1, #events do\n        local event = events[i]\n        if event.Action == \"Deposit\" then\n          print(string.format('Deposited %s for %s', event.TokenAmount, event.Recipient))\n          insertDeposit(event.Recipient, msg.From, event.User, event.Token, event.TokenAmount, msg.Timestamp)\n        elseif event.Action == \"Withdraw\" then\n          local total = utils.add(event.TokenAmount, event.Fee or \"0\")\n          print(string.format(\"Withdraw %s for %s\", total, event.User))\n          updateWithdraw(event.User, total, event.Timestamp)\n        end\n      end\n    elseif msg.Format and msg.Format == \"Event-List-CSV\" then\n      local lines = split_by_linefeed(msg.Data)\n      for i = 1, #lines do\n        local fields = split_by_comma(lines[i])\n        local event = {\n          Action = fields[1],\n          Recipient = fields[2],\n          Reward = fields[3],\n          Fee = fields[4],\n          Timestamp = fields[5]\n        }\n        if event.Action == \"Deposit\" then\n          insertDeposit(event.Recipient, msg.From, event.Recipient, \"AR\", event.Reward, event.Timestamp)\n        elseif event.Action == \"Withdraw\" then\n          local total = utils.add(event.Reward or \"0\", event.Fee or \"0\")\n          updateWithdraw(event.Recipient, total, event.Timestamp)\n        end\n        -- print('Processed: ' .. lines[i])\n      end\n      return #lines\n    else\n      -- do key/value\n      local deposits = require('json').decode(msg.Data)\n      for k, v in pairs(deposits) do\n        print('insert deposit: ' .. v .. ' to ' .. k)\n        insertDeposit(k, msg.From, k, msg.Token, v, msg.Timestamp)\n      end\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\nfunction mint.LoadBalances(msg)\n  local status, err = pcall(function()\n    local deposits = require('json').decode(msg.Data)\n    for k, v in pairs(deposits) do\n      print('initialize balance: ' .. v .. ' to ' .. k)\n      Balances[k] = v\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Mint\nfunction mint.Mint(msg)\n  local status, err = pcall(function()\n    if msg.Action == \"Cron\" and MODE == \"OFF\" then\n      print(\"Not Minting by CRON untils MODE is set to ON\")\n      return \"OK\"\n    end\n\n    print('Minting Every 5 minutes!')\n    -- Get Reward List\n    local list = Utils.reduce(\n      function(acc, item)\n        acc[item.Recipient] = item.Amount\n        return acc\n      end,\n      {},\n      dbAdmin:exec [[select Recipient, Amount from Rewards;]]\n    )\n    -- Get Remaining Supply\n    local remainingSupply = utils.subtract(TotalSupply, MintedSupply)\n    -- Get Reward Percent\n    local reward = string.format('%.0f', bint(remainingSupply) * ARM_Mint_PCT)\n    -- Allocate Rewards\n    local rewards = allocate(list, reward)\n    -- Update Balances\n    for k, v in pairs(rewards) do\n      if not Balances[k] then\n        Balances[k] = \"0\"\n      end\n      Balances[k] = utils.add(Balances[k], v)\n      -- print(\"Address: \" .. k .. \" Balance \" .. Balances[k])\n      -- supply = utils.add(supply, Balances[k])\n    end\n    -- Calculate Circulating Supply\n    MintedSupply = Utils.reduce(function(a, b) return tostring(bint(a) + bint(b)) end, \"0\", Utils.values(Balances))\n    MintCount = MintCount + 1\n\n    print(\"Total Minted Supply\" .. MintedSupply)\n    print(\"Mints: \" .. MintCount)\n\n    LastMintTimestamp = msg.Timestamp\n  end)\n  if err then\n    print(err)\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return string.format([[\n  Total Minted Supply: %s\n  Mints: %s \n  ]], MintedSupply, MintCount)\nend\n\n-- matchers\nfunction mint.isRegister(msg)\n  return ao.id == msg.From and ao.isTrusted(msg) and msg.Action == \"Oracle.Register\"\nend\n\nfunction mint.isDeposit(msg)\n  return msg.Action == \"Deposit\" and mint.isOracle(msg)\nend\n\nfunction mint.isWithdraw(msg)\n  return msg.Action == \"Withdraw\" and mint.isOracle(msg)\nend\n\nfunction mint.isOverPlus(msg)\n  return msg.Action == \"OverPlus\" and mint.isOracle(msg)\nend\n\nfunction mint.isBatch(msg)\n  -- return msg.Action == \"Mint.Batch\" and MODE == \"OFF\" and msg.Owner == \"w7PAoAtLRjE48eW1qoKt5n5rzCyeOxDTt6RbYwELxDU\"\n  return msg.Action == \"Mint.Batch\" and Utils.includes(msg.From, BatchesAllowed)\nend\n\nfunction mint.isLoadBalances(msg)\n  return msg.Action == \"Mint.LoadBalances\" and Utils.includes(msg.From, BatchesAllowed)\nend\n\nfunction mint.isCron(msg)\n  return msg.Action == \"Cron\" and msg.From == \"gCpQfnG6nWLlKs8jYgV8oUfe38GYrPLv59AC7LCtCGg\"\nend\n\nreturn mint\n\nend\n\n_G.package.loaded[\"mint\"] = _loaded_mod_mint()\n\n--[[\n  AO Token uses the local token contract\n]]\nlocal token = require('token')\nlocal bint = require('.bint')(256)\n\n-- LastMintTimestamp\nLastMintTimestamp = LastMintTimestamp or 0\n-- MODE - OFF = Manual Minting only, ON = Automated Minting\nMODE = MODE or \"OFF\"\n\n-- Circulating Supply\nMintedSupply = MintedSupply or \"0\"\n-- 5 MIN REWARD SUPPLY PERCENT\nAR_Mint_PCT = bint(\"1647321875\") / bint(\"1000\")\nARM_Mint_PCT = AR_Mint_PCT / bint(\"1000000000000\")\n\nMint = require('mint')\n\nHandlers.add('mint.register', Mint.isRegister, Mint.registerOracle)\nHandlers.add('mint.deposit', Mint.isDeposit, Mint.handleDeposit)\nHandlers.add('mint.withdraw', Mint.isWithdraw, Mint.handleWithdraw)\n\nHandlers.add('cron.mint', Mint.isCron, Mint.Mint)\nHandlers.add('mint.batch', Mint.isBatch, Mint.Batch)\nHandlers.add('mint.loadbalances', Mint.isLoadBalances, Mint.LoadBalances)\n\nHandlers.add('token.info',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Info\"),\n  token.info\n)\n\nHandlers.add('token.balance',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Balance\"),\n  token.balance\n)\n\nHandlers.add('token.balances',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Balances\"),\n  token.balances\n)\n\nHandlers.add('token.transfer',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Transfer\"),\n  token.transfer\n)\n\nHandlers.add('token.totalSupply',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Total-Supply\"),\n  token.totalSupply\n)\n\nHandlers.add('token.burn',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Burn\"),\n  token.burn\n)\n\nHandlers.add('token.mintedSupply',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Minted-Supply\"),\n  function(msg)\n    Send({ Target = msg.From, Data = MintedSupply })\n    print(\"Id: \" .. msg.From .. \" Requested Minted Supply: \" .. MintedSupply)\n  end\n)\n\n-- need to create this in aos\n--[[\nNeed to implement this in aos to always run this handler no matter what at the end.\n\nHandlers.always('mint.automatic', function (msg)\n  local Now = msg.Timestamp\n  if MODE == \"ON\" then\n     if Now > LastMintTimestamp + FIVE_MINUTES and Now < LastMintTimestamp + TEN_MINUTES then\n       Mint\n     end\n     Mint.Mint(msg)\n     return \"ok\"\n  end\n\nend)\n]]\n\nreturn 2\n"
            }
        },
        "cursor": "1718317469224"
    },
    {
        "node": {
            "message": {
                "id": "JMFhyGmlUaKJqiBGTQgZAmelVR0XRUyxMp_8pXwX8tM",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintedSupply"
            }
        },
        "cursor": "1718317456246"
    },
    {
        "node": {
            "message": {
                "id": "ouLtvndY9wHlN9Cub3yXDWewZSRoLuoBUUVXBd0YD4M",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintCount"
            }
        },
        "cursor": "1718317437077"
    },
    {
        "node": {
            "message": {
                "id": "aeMJPEuluteBY3_rDig-pLM-kp2Ryp52EbZeV1g1X-I",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Inbox[#Inbox-5]"
            }
        },
        "cursor": "1718315790231"
    },
    {
        "node": {
            "message": {
                "id": "G3KannU---8MNi9m6etDnmuhMIWYNoWINuu3yil0xGw",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Inbox[#Inbox-5].From"
            }
        },
        "cursor": "1718315781315"
    },
    {
        "node": {
            "message": {
                "id": "fwgqj_qaDDYTwd6PfoAm_qPuKuWCB8v2wJZ6SSJZyVs",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Send({Target = ao.id, Action = \"MintedSupply\"})"
            }
        },
        "cursor": "1718315689965"
    },
    {
        "node": {
            "message": {
                "id": "SZ6OXta3iVnoXWmDFVATJxYkbbqjpQlfBfxAMmSPNx8",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Send({Target = ao.id, Action = \"TotalSupply\"})"
            }
        },
        "cursor": "1718315673145"
    },
    {
        "node": {
            "message": {
                "id": "zdJBj9Ycw7jnmEoSfyKYQwedFu7Am2TR11LnuaE0qwI",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Send({Target = ao.id, Action = \"Total-Supply\"})"
            }
        },
        "cursor": "1718315661346"
    },
    {
        "node": {
            "message": {
                "id": "ujF5rbUEK0J5T7oD9qt82Jp6dlT_dPDhpOy_f3DorWM",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Send({Target = ao.id, Action = \"Balance\"})"
            }
        },
        "cursor": "1718315648262"
    },
    {
        "node": {
            "message": {
                "id": "n5XxTnKyvT3nDJJCe7Qku66FodECakBs4-SZMVrL4HE",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Send({Target = ao.id, Data = \"Hello\"})"
            }
        },
        "cursor": "1718314084644"
    },
    {
        "node": {
            "message": {
                "id": "dhIXpDItyDW_dvBUPXDez-JXEJXI33h3cIkqrSgUSLk",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintedSupply = \"1037726128444722071\""
            }
        },
        "cursor": "1718313204248"
    },
    {
        "node": {
            "message": {
                "id": "ig2DCKFc6V9BlJZjHR01c0UwwFBx7dKQcbCki32vmfk",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "local bint = require('.bint')(256)\nreturn Utils.reduce(function(a, b) return tostring(bint(a) + bint(b)) end, \"0\", Utils.values(Balances))\n"
            }
        },
        "cursor": "1718313187999"
    },
    {
        "node": {
            "message": {
                "id": "XVzljKUrFNOp5R6SdGASMUeEfK4JPrOz8Wqduz6mSY0",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintCount"
            }
        },
        "cursor": "1718313122516"
    },
    {
        "node": {
            "message": {
                "id": "0osvIB4eKI1X752s598Ebtii0OHkcrzp7LNCT9LIjs8",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintedSupply"
            }
        },
        "cursor": "1718313117141"
    },
    {
        "node": {
            "message": {
                "id": "Yb9wnPmG4IL8WldIKo59vGNcZHRiTaaO4a57TbI1sqU",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Balances[\"QGxnlrEdXZ5kfcMtRrQf6dvk4UEw4l-Mjmp4H9gnhdY\"]"
            }
        },
        "cursor": "1718306867261"
    },
    {
        "node": {
            "message": {
                "id": "qdKYO_6hniUxKM_WOzsI3B4snfYLoTV8YZePL8kQ9qk",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Balances[\"qdpklNc-gDIGsjjNME6XrGchibzOffw9UMrC4orV1ZQ\"]"
            }
        },
        "cursor": "1718305934193"
    },
    {
        "node": {
            "message": {
                "id": "pgTRhgFzOSeEDU1jE7_uQQxGrl9oZm-G9BCdh-pyLt4",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "dbAdmin:exec[[select * from Rewards where Recipient = \"qdpklNc-gDIGsjjNME6XrGchibzOffw9UMrC4orV1ZQ\";]]"
            }
        },
        "cursor": "1718304229264"
    },
    {
        "node": {
            "message": {
                "id": "_HCKxZ9PWFPnU1aC6t_WKyn240ES8csJFw2kwAb-fJg",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintedSupply"
            }
        },
        "cursor": "1718302763431"
    },
    {
        "node": {
            "message": {
                "id": "ofiCPQhpn_XJ4LnxNjNdLWFd4PkGi8tYvGoK2nVKlUI",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Balances[\"Jr4Q2kdQqmB7_llYg-leC2bmgPnxvELsWSVQ0smR6u8\"]"
            }
        },
        "cursor": "1718302719017"
    },
    {
        "node": {
            "message": {
                "id": "HLAfhPXJRRbttAu11BocoSCK38_4jg9Us7VeoQavj2c",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "dbAdmin:exec[[select * from Rewards where Recipient = \"Jr4Q2kdQqmB7_llYg-leC2bmgPnxvELsWSVQ0smR6u8\";]]"
            }
        },
        "cursor": "1718302652030"
    },
    {
        "node": {
            "message": {
                "id": "x5SNUjMLzP4ME85E8UffasKjJxTv4NZPkUCHTxNGHpw",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintCount"
            }
        },
        "cursor": "1718301916581"
    },
    {
        "node": {
            "message": {
                "id": "8lVwp6zoqZaL_jBGpTrDiGwstC5fBOq5_hkR-hlAJzg",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "dbAdmin:exec[[select count(*) from Rewards;]]"
            }
        },
        "cursor": "1718301750904"
    },
    {
        "node": {
            "message": {
                "id": "Qj3tKY4mHnZZ3rO_bTFLj115hgFaHvwQnQE4nKfLhQs",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "dbAdmin:exec[[select count(*) from Rewards;]]"
            }
        },
        "cursor": "1718300861042"
    },
    {
        "node": {
            "message": {
                "id": "Jcd44ZpU50usQQbQneezuXKC2CI8n9SyNaEIrYyxGXE",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "ao.id"
            }
        },
        "cursor": "1718300566946"
    },
    {
        "node": {
            "message": {
                "id": "kEMQm4xTRRtaeoodmwvE4eCWYZ50t3IZeJY8DOOnWEg",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "dbAdmin:exec[[select count(*) from Rewards;]]"
            }
        },
        "cursor": "1718300497698"
    },
    {
        "node": {
            "message": {
                "id": "ldOI5lSeCSfpp7l0j2YwBm6OJQqMVuJmBaG0K2U2V2U",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintCount = 30764"
            }
        },
        "cursor": "1718299040586"
    },
    {
        "node": {
            "message": {
                "id": "k963V2XSA5lbdbv29s0etFF7Ns1nGdVz9WoV262oQWY",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "MintCount"
            }
        },
        "cursor": "1718298984295"
    },
    {
        "node": {
            "message": {
                "id": "-dAlA_cct6_uEuw4WQvZcNJ4XvntkfIZNppTw-CA-9k",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "dbAdmin:exec[[select count(*) from Rewards;]]"
            }
        },
        "cursor": "1718298977649"
    },
    {
        "node": {
            "message": {
                "id": "inw22RAT84NjDv-k0rIw8nmSe4u6559bkxBYKOpbl88",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Owner"
            }
        },
        "cursor": "1718298281876"
    },
    {
        "node": {
            "message": {
                "id": "E4CQF917uI0PWVRjVybUqW9sCVcWM5tDiPunZX-RcZQ",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "ao.id"
            }
        },
        "cursor": "1718298192687"
    },
    {
        "node": {
            "message": {
                "id": "WGelm_QesWwvIiY9vfQxJKZqfR1znsXvsf_oRplJwes",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Ticker"
            }
        },
        "cursor": "1718297954942"
    },
    {
        "node": {
            "message": {
                "id": "tbSmxRl4fmefqqWVOn8FRG4aGpoyHqKJAkQNwHzDCeo",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Name"
            }
        },
        "cursor": "1718297951457"
    },
    {
        "node": {
            "message": {
                "id": "gP3wzDJWjz3T1mf0kuQ69kwFAOKJWiLTUzb8ZlHn7Kw",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Logo = \"UkS-mdoiG8hcAClhKK8ch4ZhEzla0mCPDOix9hpdSFE\""
            }
        },
        "cursor": "1718297948632"
    },
    {
        "node": {
            "message": {
                "id": "P-0HsZ_Cq9g0EFUSTuhSgT2ulhtUhXsxxJ3AGrVGSX0",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "#Utils.keys(Balances)"
            }
        },
        "cursor": "1718297864807"
    },
    {
        "node": {
            "message": {
                "id": "nQgGCUzWNiUSLBqAjLwxFrcMGEm7heEVkmWJawvLRyA",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "ao.id"
            }
        },
        "cursor": "1718297727061"
    },
    {
        "node": {
            "message": {
                "id": "pbU9WRBYwZqVkMetf6_UsgdRS2Jmkx8nykOv-fX2Ee0",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "dbAdmin:tables()"
            }
        },
        "cursor": "1718297702075"
    },
    {
        "node": {
            "message": {
                "id": "NXtjC5GPtKMy2joWjE4sqSRXHOBYYcdXzwpubjG1ztk",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Mint.init()"
            }
        },
        "cursor": "1718297697024"
    },
    {
        "node": {
            "message": {
                "id": "7pGf9Dp2BAhSNkQy9L-4x5EUBYUmmOdETS6Bw0Evdhw",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "\n\n-- module: \"token\"\nlocal function _loaded_mod_token()\nlocal token = { _version = \"0.0.4\" }\n\nlocal json = require('json')\nlocal bint = require('.bint')(256)\nlocal ao = require('ao')\n\nlocal utils = {\n  add = function(a, b)\n    return tostring(bint(a) + bint(b))\n  end,\n  subtract = function(a, b)\n    return tostring(bint(a) - bint(b))\n  end,\n  toBalanceValue = function(a)\n    return tostring(bint(a))\n  end,\n  toNumber = function(a)\n    return tonumber(a)\n  end\n}\n\n--[[\n     Initialize State\n\n     ao.id is equal to the Process.Id\n   ]]\n--\nVariant = \"0.0.3\"\n\n-- token should be idempotent and not change previous state updates\nDenomination = Denomination or 12\nBalances = Balances or {}\n-- 21_000_000 AO Tokens\n-- 21_000_000_000_000_000_000 Armstrongs\nTotalSupply = \"21000000000000000000\"\nName = 'AO'\nTicker = 'AO'\nLogo = Logo or 'SBCCXwwecBlDqRLUjb8dYABExTJXLieawf7m2aBJ-KY'\n\n\n--[[\n     Add handlers for each incoming Action defined by the ao Standard Token Specification\n   ]]\n--\n\n--[[\n     Info\n   ]]\n--\ntoken.info = function(msg)\n  ao.send({\n    Target = msg.From,\n    Name = Name,\n    Ticker = Ticker,\n    Logo = Logo,\n    Denomination = tostring(Denomination)\n  })\nend\n\n\n--[[\n     Balance\n   ]]\n--\ntoken.balance = function(msg)\n  local bal = '0'\n\n  -- If not Recipient is provided, then return the Senders balance\n  if (msg.Tags.Recipient and Balances[msg.Tags.Recipient]) then\n    bal = Balances[msg.Tags.Recipient]\n  elseif msg.Tags.Target and Balances[msg.Tags.Target] then\n    bal = Balances[msg.Tags.Target]\n  elseif Balances[msg.From] then\n    bal = Balances[msg.From]\n  end\n\n  ao.send({\n    Target = msg.From,\n    Balance = bal,\n    Ticker = Ticker,\n    Account = msg.Tags.Recipient or msg.From,\n    Data = bal\n  })\nend\n\n--[[\n     Balances\n   ]]\n--\ntoken.balances = function(msg)\n  ao.send({ Target = msg.From, Data = Balances })\nend\n--[[\n     Transfer\n   ]]\n--\ntoken.transfer = function(msg)\n  if MintCount < 100000 then\n    Send({ Target = msg.From, Data = \"Transfer is locked!\" })\n    return \"Transfer is locked\"\n  end\n  local status, err = pcall(function()\n    assert(type(msg.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\n    assert(bint(msg.Quantity) > bint(0), 'Quantity must be greater than 0')\n\n    if not Balances[msg.From] then Balances[msg.From] = \"0\" end\n    if not Balances[msg.Recipient] then Balances[msg.Recipient] = \"0\" end\n\n    if bint(msg.Quantity) <= bint(Balances[msg.From]) then\n      Balances[msg.From] = utils.subtract(Balances[msg.From], msg.Quantity)\n      Balances[msg.Recipient] = utils.add(Balances[msg.Recipient], msg.Quantity)\n\n      --[[\n          Only send the notifications to the Sender and Recipient\n          if the Cast tag is not set on the Transfer message\n        ]]\n      --\n      if not msg.Cast then\n        -- Debit-Notice message template, that is sent to the Sender of the transfer\n        local debitNotice = {\n          Target = msg.From,\n          Action = 'Debit-Notice',\n          Recipient = msg.Recipient,\n          Quantity = msg.Quantity,\n          Data = Colors.gray ..\n              \"You transferred \" ..\n              Colors.blue .. msg.Quantity .. Colors.gray .. \" to \" .. Colors.green .. msg.Recipient .. Colors.reset\n        }\n        -- Credit-Notice message template, that is sent to the Recipient of the transfer\n        local creditNotice = {\n          Target = msg.Recipient,\n          Action = 'Credit-Notice',\n          Sender = msg.From,\n          Quantity = msg.Quantity,\n          Data = Colors.gray ..\n              \"You received \" ..\n              Colors.blue .. msg.Quantity .. Colors.gray .. \" from \" .. Colors.green .. msg.From .. Colors.reset\n        }\n\n        -- Add forwarded tags to the credit and debit notice messages\n        for tagName, tagValue in pairs(msg) do\n          -- Tags beginning with \"X-\" are forwarded\n          if string.sub(tagName, 1, 2) == \"X-\" then\n            debitNotice[tagName] = tagValue\n            creditNotice[tagName] = tagValue\n          end\n        end\n\n        -- Send Debit-Notice and Credit-Notice\n        ao.send(debitNotice)\n        ao.send(creditNotice)\n      end\n    else\n      ao.send({\n        Target = msg.From,\n        Action = 'Transfer-Error',\n        ['Message-Id'] = msg.Id,\n        Error = 'Insufficient Balance!'\n      })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n--[[\n     Total Supply\n   ]]\n--\ntoken.totalSupply = function(msg)\n  assert(msg.From ~= ao.id, 'Cannot call Total-Supply from the same process!')\n\n  ao.send({\n    Target = msg.From,\n    Action = 'Total-Supply',\n    Data = TotalSupply,\n    Ticker = Ticker\n  })\nend\n\n--[[\n Burn\n]] --\ntoken.burn = function(msg)\n  assert(type(msg.Quantity) == 'string', 'Quantity is required!')\n  assert(bint(msg.Quantity) <= bint(Balances[msg.From]), 'Quantity must be less than or equal to the current balance!')\n\n  Balances[msg.From] = utils.subtract(Balances[msg.From], msg.Quantity)\n  TotalSupply = utils.subtract(TotalSupply, msg.Quantity)\n\n  ao.send({\n    Target = msg.From,\n    Data = Colors.gray .. \"Successfully burned \" .. Colors.blue .. msg.Quantity .. Colors.reset\n  })\nend\n\n\nreturn token\n\nend\n\n_G.package.loaded[\"token\"] = _loaded_mod_token()\n\n-- module: \"allocator\"\nlocal function _loaded_mod_allocator()\n  local allocator = { _version = \"0.0.1\" }\n\nlocal bint = require('.bint')(256)\n\n-- utility functions\nlocal function reduce(func, initial, t)\n    local result = initial\n    for _, v in ipairs(t) do\n        result = func(result, v)\n    end\n    return result\nend\n\nlocal function values(t)\n    local result = {}\n    for _, v in pairs(t) do\n        table.insert(result, v)\n    end\n    return result\nend\n\nlocal function keys(t)\n    local result = {}\n    for k, _ in pairs(t) do\n        table.insert(result, k)\n    end\n    return result\nend\n\nlocal function sum(t)\n    return reduce(function(a, b) return a + b end, 0, t)\nend\n\nlocal function mergeAll(tables)\n    local result = {}\n    for _, t in ipairs(tables) do\n        for k, v in pairs(t) do\n            result[k] = v\n        end\n    end\n    return result\nend\n\n\nfunction allocator.allocate(balances, reward)\n    local function add(a, b) return bint(a) + bint(b) end\n\n    -- Calculate total positive balances\n    local total = reduce(add, bint(0), values(balances))\n    \n    -- Allocate rewards based on balances\n    local allocation = mergeAll(\n        reduce(function(a, s)\n            local asset = s[1]\n            local balance = bint(s[2])\n            \n            if balance < bint(1) then\n                return a\n            end\n            \n            local pct = (balance / total) * bint(100)\n            local coins = math.floor(bint(reward) * (pct / bint(100)) + (bint(1) / bint(2))) -- Round to nearest integer\n            \n            table.insert(a, {[asset] = tostring(coins)})\n            return a\n        end, {}, (function()\n            local result = {}\n            for k, v in pairs(balances) do\n                table.insert(result, {k, v})\n            end\n            return result\n        end)())\n    )\n    \n    -- Handle off by one errors\n    local remainder = reward - sum(values(allocation))\n    local k = keys(allocation)\n    local i = 1\n    while remainder > 0 do\n        allocation[k[i]] = allocation[k[i]] + 1\n        remainder = remainder - 1\n        i = (i % #k) + 1\n    end\n    \n    return allocation\nend\n\nreturn allocator\n\nend\n\n_G.package.loaded[\"allocator\"] = _loaded_mod_allocator()\n\n-- module: \"mint\"\nlocal function _loaded_mod_mint()\n--[[\n  Mint Module handles the minting functions for AO Token\n\n]]\nlocal bint = require('.bint')(256)\nlocal sqlite3 = require('lsqlite3')\nlocal Allocator = require('allocator')\n\nlocal allocate = Allocator.allocate\nMintCount = MintCount or 0\nMintDb = MintDb or sqlite3.open_memory()\nlocal INSERT_ORACLE_SQL = \"INSERT INTO Oracles (Oracle, Name, StartTimestamp, DelayDepositInterval) VALUES (?, ?, ?, ?)\"\n-- DbAdmin Module is required\ndbAdmin = dbAdmin or require('@rakis/DbAdmin').new(MintDb)\n-- processes or wallets allowed to send event batches\nBatchesAllowed = BatchesAllowed or\n    { \"88T4YtovZ9ZDgEh1Xb0T_VlF9rXCRFOdi_B2Eyv1eMs\", \"w7PAoAtLRjE48eW1qoKt5n5rzCyeOxDTt6RbYwELxDU\" }\nLastMintHeight = LastMintHeight or \"1443785\"\nRewards = {}\n\nlocal utils = {\n  add = function(a, b)\n    if (bint(a) < bint(0)) then\n      a = 0\n    end\n    if (bint(b) < bint(0)) then\n      b = 0\n    end\n    return tostring(bint(a) + bint(b))\n  end,\n  subtract = function(a, b)\n    if bint(b) < bint(0) then\n      b = 0\n    end\n    local value = bint(a) - bint(b)\n    if value < bint(0) then\n      return \"0\"\n    else\n      return tostring(bint(a) - bint(b))\n    end\n  end,\n  toBalanceValue = function(a)\n    return tostring(bint(a))\n  end,\n  toNumber = function(a)\n    return tonumber(a)\n  end,\n  greaterThan = function(a, b)\n    return bint(a) > bint(b)\n  end\n}\n\nlocal mint = { _version = \"0.0.1\" }\n\n-- local db functions\nlocal function insertOracle(oracle, name, startTimestamp, delayDepositInterval)\n  local stmt = MintDb:prepare(INSERT_ORACLE_SQL)\n\n  if stmt == nil then\n    error(\"Failed to prepare statement: \" .. MintDb:errmsg())\n  end\n\n  stmt:bind_values(oracle, name, startTimestamp, delayDepositInterval)\n\n  local result = stmt:step()\n  if result ~= sqlite3.DONE then\n    error(\"Failed to insert record: \" .. MintDb:errmsg())\n  end\n\n  stmt:finalize()\nend\n\nlocal function insertDeposit(recipient, oracle, user, token, amount, updated)\n  -- Prepare the SQL select statement to check if the record exists\n  local select_stmt = MintDb:prepare(\"SELECT Amount FROM Rewards WHERE Recipient = ? AND Token = ?\")\n  select_stmt:bind_values(recipient, token)\n  local result = select_stmt:step()\n\n  print(string.format(\"Adding Deposit to %s in the amount of %s for Token %s\", recipient, amount, token))\n  local rewardAccountExists = false\n  local current_amount = 0\n  if result == sqlite3.ROW then\n    rewardAccountExists = true\n    current_amount = bint(select_stmt:get_value(0))\n  end\n  select_stmt:finalize()\n\n  print(string.format(\"Current Amount %s\", current_amount))\n  --error(\"Current: \" .. current_amount .. \" amount: \" .. amount)\n  -- Calculate the new total amount\n  local total_amount = utils.add(current_amount, amount)\n\n  print(string.format(\"Total Amount %s\", total_amount))\n  if rewardAccountExists then\n    -- print(\"Adding Deposit\")\n    -- Prepare the SQL update statement to update the existing record\n    local update_stmt = MintDb:prepare(\"UPDATE Rewards SET Amount = ?, Updated = ? WHERE Recipient = ?\")\n    update_stmt:bind_values(total_amount, updated, recipient)\n    local update_result = update_stmt:step()\n    if update_result ~= sqlite3.DONE then\n      print(\"Failed to update record: \" .. MintDb:errmsg())\n    end\n    update_stmt:finalize()\n    -- print(\"Finish Update\")\n  else\n    -- print(\"Insert Deposit\")\n    -- Prepare the SQL insert statement to insert a new record\n    local insert_stmt = MintDb:prepare(\n      \"INSERT INTO Rewards (Recipient, Oracle, User, Token, Amount, Updated) VALUES (?, ?, ?, ?, ?, ?)\")\n    insert_stmt:bind_values(recipient, oracle, user, token, total_amount, updated)\n    local insert_result = insert_stmt:step()\n    if insert_result ~= sqlite3.DONE then\n      print(\"Failed to insert record: \" .. MintDb:errmsg())\n    end\n    insert_stmt:finalize()\n    -- print(\"Finish Deposit\")\n  end\nend\n\nlocal function updateWithdraw(user, amount, updated)\n  -- Prepare the SQL select statement to check if the record exists\n  local select_stmt = MintDb:prepare(\"SELECT Amount FROM Rewards WHERE Recipient = ? and Token = ?\")\n  select_stmt:bind_values(user, \"AR\")\n  local result = select_stmt:step()\n\n  local current_amount = 0\n  if result == sqlite3.ROW then\n    current_amount = bint(select_stmt:get_value(0))\n  end\n  select_stmt:finalize()\n\n  -- Calculate the new total amount\n  local total_amount = utils.subtract(current_amount, amount)\n  print(string.format(\"Withdraw from %s in the amount of %s leaves %s\", user, amount, total_amount))\n  if current_amount > 0 then\n    -- print(\"Updating Withdraw\")\n    -- Prepare the SQL update statement to update the existing record\n    local update_stmt = MintDb:prepare(\"UPDATE Rewards SET Amount = ?, Updated = ? WHERE User = ?\")\n    update_stmt:bind_values(total_amount, updated, user)\n    local update_result = update_stmt:step()\n    if update_result ~= sqlite3.DONE then\n      print(\"Failed to update record: \" .. MintDb:errmsg())\n    end\n    update_stmt:finalize()\n    -- print(\"Finish Update\")\n  end\nend\n\n-- init database\nfunction mint.init()\n  MintDb:exec [[\nCREATE TABLE IF NOT EXISTS Oracles (\n  Oracle TEXT PRIMARY KEY,\n  Name TEXT NOT NULL,\n  StartTimestamp TEXT NOT NULL,\n  DelayDepositInterval TEXT NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS Rewards (\n  Recipient TEXT NOT NULL,\n  Token TEXT NOT NULL,\n  Oracle TEXT NOT NULL,\n  User TEXT NOT NULL,\n  Amount TEXT NOT NULL,\n  Updated TEXT NOT NULL,\n  PRIMARY KEY (Recipient, Token),\n  FOREIGN KEY (Oracle) REFERENCES Oracles(Oracle)\n);\n  ]]\n  return \"Mint Initialized.\"\nend\n\nfunction mint.isOracle(msg)\n  if not Utils.includes(msg.Owner, ao.authorities) then\n    return false\n  end\n  local oracle = msg.From\n\n  local stmt = MintDb:prepare(\"SELECT 1 FROM Oracles WHERE Oracle = ?\")\n  stmt:bind_values(oracle)\n  stmt:step()\n  local exists = (stmt:get_value(0) ~= nil)\n  stmt:finalize()\n  return exists\nend\n\n-- handle register Oracle\nfunction mint.registerOracle(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Oracle) == \"string\", \"Oracle is required!\")\n    assert(type(msg.Name) == \"string\", \"Name is required!\")\n    assert(type(msg.Start) == \"string\", \"Start Timestamp required!\")\n    assert(type(msg.DepositDelay) == \"string\", \"Deposit Delay is required\")\n    insertOracle(msg.Oracle, msg.Name, msg.Start, msg.DepositDelay)\n    Send({ Target = msg.From, Data = \"registered.\" })\n  end)\n  if err then\n    print(err)\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle Deposit request\nfunction mint.handleDeposit(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Tags.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.User) == \"string\", \"User is required!\")\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    assert(type(msg.TokenAmount) == \"string\", \"TokenAmount is required!\")\n    assert(type(msg.Reward) == \"string\", \"Reward is required!\")\n    assert(type(msg.TransactionHash) == \"string\", \"TransactionHash is required!\")\n    -- assert(type(msg.Tags.Timestamp) == \"string\", \"Timestamp is required!\")\n    insertDeposit(msg.Recipient, msg.From, msg.User, msg.Token, msg.TokenAmount, msg.Timestamp)\n    Send({ Target = msg.From, Action = \"Deposit-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    if msg.User ~= msg.Recipient then\n      Send({ Target = msg.Recipient, Action = \"Deposit-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle Withdraw request\nfunction mint.handleWithdraw(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Tags.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.User) == \"string\", \"User is required!\")\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    assert(type(msg.TokenAmount) == \"string\", \"TokenAmount is required!\")\n    assert(type(msg.Reward) == \"string\", \"Reward is required!\")\n    assert(type(msg.TransactionHash) == \"string\", \"TransactionHash is required!\")\n    -- assert(type(msg.Tags.Timestamp) == \"string\", \"Timestamp is required!\")\n    updateWithdraw(msg.Recipient, msg.TokenAmount, msg.Timestamp)\n    Send({ Target = msg.From, Action = \"Withdraw-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    if msg.User ~= msg.Recipient then\n      Send({ Target = msg.Recipient, Action = \"Withdraw-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle OverPlus reward distribution\nfunction mint.handleOverPlus(msg)\n  -- TODO:\nend\n\nlocal function split_by_linefeed(str)\n  local result = {}\n  for line in str:gmatch(\"[^\\r\\n]+\") do\n    table.insert(result, line)\n  end\n  return result\nend\n\nlocal function split_by_comma(str)\n  local result = {}\n  for line in str:gmatch(\"[^,]+\") do\n    table.insert(result, line)\n  end\n  return result\nend\n\n-- Handle Batch Deposits mainly for loading WalletList\nfunction mint.Batch(msg)\n  local status, err = pcall(function()\n    if msg.Height and LastMintHeight >= msg.Height then\n      print(\"Already Applied Block: \" .. msg.Height)\n      return \"OK\"\n    end\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    -- Batch can be in two formats\n    -- 1. Address:Balance KeyValue\n    -- 2. Mint Event Transactions \"Format = 'Event-List'\"\n    if msg.Format and msg.Format == \"Event-List\" then\n      print('Format: ' .. msg.Format)\n      -- event list\n      local events = require('json').decode(msg.Data)\n      print(string.format(\"Received %d events to process\", #events))\n      for i = 1, #events do\n        local event = events[i]\n        if event.Action == \"Deposit\" then\n          print(string.format('Deposited %s for %s', event.TokenAmount, event.Recipient))\n          insertDeposit(event.Recipient, msg.From, event.User, event.Token, event.TokenAmount, msg.Timestamp)\n        elseif event.Action == \"Withdraw\" then\n          local total = utils.add(event.TokenAmount, event.Fee or \"0\")\n          print(string.format(\"Withdraw %s for %s\", total, event.User))\n          updateWithdraw(event.User, total, event.Timestamp)\n        end\n      end\n    elseif msg.Format and msg.Format == \"Event-List-CSV\" then\n      local lines = split_by_linefeed(msg.Data)\n      for i = 1, #lines do\n        local fields = split_by_comma(lines[i])\n        local event = {\n          Action = fields[1],\n          Recipient = fields[2],\n          Reward = fields[3],\n          Fee = fields[4],\n          Timestamp = fields[5]\n        }\n        if event.Action == \"Deposit\" then\n          insertDeposit(event.Recipient, msg.From, event.Recipient, \"AR\", event.Reward, event.Timestamp)\n        elseif event.Action == \"Withdraw\" then\n          local total = utils.add(event.Reward or \"0\", event.Fee or \"0\")\n          updateWithdraw(event.Recipient, total, event.Timestamp)\n        end\n        -- print('Processed: ' .. lines[i])\n      end\n      return #lines\n    else\n      -- do key/value\n      local deposits = require('json').decode(msg.Data)\n      for k, v in pairs(deposits) do\n        print('insert deposit: ' .. v .. ' to ' .. k)\n        insertDeposit(k, msg.From, k, msg.Token, v, msg.Timestamp)\n        Send({ Target = k, Action = \"Deposit-Notice\", Data = v .. \"-\" .. msg.Token })\n      end\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\nfunction mint.LoadBalances(msg)\n  local status, err = pcall(function()\n    local deposits = require('json').decode(msg.Data)\n    for k, v in pairs(deposits) do\n      print('initialize balance: ' .. v .. ' to ' .. k)\n      Balances[k] = v\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Mint\nfunction mint.Mint(msg)\n  if msg.Action == \"Cron\" and MODE == \"OFF\" then\n    print(\"Not Minting by CRON untils MODE is set to ON\")\n    return \"OK\"\n  end\n\n  print('Minting Every 5 minutes!')\n  -- Get Reward List\n  local list = Utils.reduce(\n    function(acc, item)\n      acc[item.Recipient] = item.Amount\n      return acc\n    end,\n    {},\n    dbAdmin:exec [[select Recipient, Amount from Rewards;]]\n  )\n  -- Get Remaining Supply\n  local remainingSupply = utils.subtract(TotalSupply, MintedSupply)\n  -- Get Reward Percent\n  local reward = string.format('%.0f', bint(remainingSupply) * ARM_Mint_PCT)\n  -- Allocate Rewards\n  local rewards = allocate(list, reward)\n  local supply = \"0\"\n  -- Update Balances\n  for k, v in pairs(rewards) do\n    if not Balances[k] then\n      Balances[k] = \"0\"\n    end\n    Balances[k] = utils.add(Balances[k], v)\n    -- print(\"Address: \" .. k .. \" Balance \" .. Balances[k])\n    supply = utils.add(supply, Balances[k])\n  end\n  -- Calculate Circulating Supply\n  MintedSupply = supply\n  Send({ Target = msg.From, Data = \"Minted AO Token Rewards\" })\n  LastMintTimestamp = msg.Timestamp\n  MintCount = MintCount + 1\n  return \"ok\"\nend\n\n-- matchers\nfunction mint.isRegister(msg)\n  return ao.id == msg.From and ao.isTrusted(msg) and msg.Action == \"Oracle.Register\"\nend\n\nfunction mint.isDeposit(msg)\n  return msg.Action == \"Deposit\" and mint.isOracle(msg)\nend\n\nfunction mint.isWithdraw(msg)\n  return msg.Action == \"Withdraw\" and mint.isOracle(msg)\nend\n\nfunction mint.isOverPlus(msg)\n  return msg.Action == \"OverPlus\" and mint.isOracle(msg)\nend\n\nfunction mint.isBatch(msg)\n  -- return msg.Action == \"Mint.Batch\" and MODE == \"OFF\" and msg.Owner == \"w7PAoAtLRjE48eW1qoKt5n5rzCyeOxDTt6RbYwELxDU\"\n  return msg.Action == \"Mint.Batch\" and Utils.includes(msg.From, BatchesAllowed)\nend\n\nfunction mint.isLoadBalances(msg)\n  return msg.Action == \"Mint.LoadBalances\" and Utils.includes(msg.From, BatchesAllowed)\nend\n\nfunction mint.isCron(msg)\n  return msg.Action == \"Cron\" and msg.From == \"gCpQfnG6nWLlKs8jYgV8oUfe38GYrPLv59AC7LCtCGg\"\nend\n\nreturn mint\n\nend\n\n_G.package.loaded[\"mint\"] = _loaded_mod_mint()\n\n--[[\n  AO Token uses the local token contract\n]]\nlocal token = require('token')\nlocal bint = require('.bint')(256)\n\n-- LastMintTimestamp\nLastMintTimestamp = LastMintTimestamp or 0\n-- MODE - OFF = Manual Minting only, ON = Automated Minting\nMODE = MODE or \"OFF\"\n\n-- Circulating Supply\nMintedSupply = MintedSupply or \"0\"\n-- 5 MIN REWARD SUPPLY PERCENT\nAR_Mint_PCT = bint(\"1647321875\") / bint(\"1000\")\nARM_Mint_PCT = AR_Mint_PCT / bint(\"1000000000000\")\n\nMint = require('mint')\n\nHandlers.add('mint.register', Mint.isRegister, Mint.registerOracle)\nHandlers.add('mint.deposit', Mint.isDeposit, Mint.handleDeposit)\nHandlers.add('mint.withdraw', Mint.isWithdraw, Mint.handleWithdraw)\n\nHandlers.add('cron.mint', Mint.isCron, Mint.Mint)\nHandlers.add('mint.batch', Mint.isBatch, Mint.Batch)\nHandlers.add('mint.loadbalances', Mint.isLoadBalances, Mint.LoadBalances)\n\nHandlers.add('token.info',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Info\"),\n  token.info\n)\n\nHandlers.add('token.balance',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Balance\"),\n  token.balance\n)\n\nHandlers.add('token.balances',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Balances\"),\n  token.balances\n)\n\nHandlers.add('token.transfer',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Transfer\"),\n  token.transfer\n)\n\nHandlers.add('token.totalSupply',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Total-Supply\"),\n  token.totalSupply\n)\n\nHandlers.add('token.burn',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Burn\"),\n  token.burn\n)\n\nHandlers.add('token.mintedSupply',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Minted-Supply\"),\n  function(msg)\n    Send({ Target = msg.From, Data = MintedSupply })\n    print(\"Id: \" .. msg.From .. \" Requested Minted Supply: \" .. MintedSupply)\n  end\n)\n\n-- need to create this in aos\n--[[\nNeed to implement this in aos to always run this handler no matter what at the end.\n\nHandlers.always('mint.automatic', function (msg)\n  local Now = msg.Timestamp\n  if MODE == \"ON\" then\n     if Now > LastMintTimestamp + FIVE_MINUTES and Now < LastMintTimestamp + TEN_MINUTES then\n       Mint\n     end\n     Mint.Mint(msg)\n     return \"ok\"\n  end\n\nend)\n]]\n\nreturn 2\n"
            }
        },
        "cursor": "1718297681784"
    },
    {
        "node": {
            "message": {
                "id": "_yQ5XAJdySrhtb3b6wm_U4tgIN6B2-YZfig4q4qIWXA",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "\n\nfunction _load() \n  local dbAdmin = {}\n  dbAdmin.__index = dbAdmin\n  \n  -- Function to create a new database explorer instance\n  function dbAdmin.new(db)\n      local self = setmetatable({}, dbAdmin)\n      self.db = db\n      return self\n  end\n  \n  -- Function to list all tables in the database\n  function dbAdmin:tables()\n      local tables = {}\n      for row in self.db:nrows(\"SELECT name FROM sqlite_master WHERE type='table';\") do\n          table.insert(tables, row.name)\n      end\n      return tables\n  end\n  \n  -- Function to get the record count of a table\n  function dbAdmin:count(tableName)\n      local count_query = string.format(\"SELECT COUNT(*) AS count FROM %s;\", tableName)\n      for row in self.db:nrows(count_query) do\n          return row.count\n      end\n  end\n  \n  -- Function to execute a given SQL query\n  function dbAdmin:exec(sql)\n      local results = {}\n      for row in self.db:nrows(sql) do\n          table.insert(results, row)\n      end\n      return results\n  end\n  \n  return dbAdmin\nend\n_G.package.loaded['@rakis/DbAdmin'] = _load()\nreturn \"DbAdmin Installed.\""
            }
        },
        "cursor": "1718297673053"
    },
    {
        "node": {
            "message": {
                "id": "oMS1Huy6VLVpnItMkBudjQ6kNvAp3r3BTANSDwJkkM0",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "\n\n-- module: \"token\"\nlocal function _loaded_mod_token()\nlocal token = { _version = \"0.0.4\" }\n\nlocal json = require('json')\nlocal bint = require('.bint')(256)\nlocal ao = require('ao')\n\nlocal utils = {\n  add = function(a, b)\n    return tostring(bint(a) + bint(b))\n  end,\n  subtract = function(a, b)\n    return tostring(bint(a) - bint(b))\n  end,\n  toBalanceValue = function(a)\n    return tostring(bint(a))\n  end,\n  toNumber = function(a)\n    return tonumber(a)\n  end\n}\n\n--[[\n     Initialize State\n\n     ao.id is equal to the Process.Id\n   ]]\n--\nVariant = \"0.0.3\"\n\n-- token should be idempotent and not change previous state updates\nDenomination = Denomination or 12\nBalances = Balances or {}\n-- 21_000_000 AO Tokens\n-- 21_000_000_000_000_000_000 Armstrongs\nTotalSupply = \"21000000000000000000\"\nName = 'AO'\nTicker = 'AO'\nLogo = Logo or 'SBCCXwwecBlDqRLUjb8dYABExTJXLieawf7m2aBJ-KY'\n\n\n--[[\n     Add handlers for each incoming Action defined by the ao Standard Token Specification\n   ]]\n--\n\n--[[\n     Info\n   ]]\n--\ntoken.info = function(msg)\n  ao.send({\n    Target = msg.From,\n    Name = Name,\n    Ticker = Ticker,\n    Logo = Logo,\n    Denomination = tostring(Denomination)\n  })\nend\n\n\n--[[\n     Balance\n   ]]\n--\ntoken.balance = function(msg)\n  local bal = '0'\n\n  -- If not Recipient is provided, then return the Senders balance\n  if (msg.Tags.Recipient and Balances[msg.Tags.Recipient]) then\n    bal = Balances[msg.Tags.Recipient]\n  elseif msg.Tags.Target and Balances[msg.Tags.Target] then\n    bal = Balances[msg.Tags.Target]\n  elseif Balances[msg.From] then\n    bal = Balances[msg.From]\n  end\n\n  ao.send({\n    Target = msg.From,\n    Balance = bal,\n    Ticker = Ticker,\n    Account = msg.Tags.Recipient or msg.From,\n    Data = bal\n  })\nend\n\n--[[\n     Balances\n   ]]\n--\ntoken.balances = function(msg)\n  ao.send({ Target = msg.From, Data = Balances })\nend\n--[[\n     Transfer\n   ]]\n--\ntoken.transfer = function(msg)\n  if MintCount < 100000 then\n    Send({ Target = msg.From, Data = \"Transfer is locked!\" })\n    return \"Transfer is locked\"\n  end\n  local status, err = pcall(function()\n    assert(type(msg.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.Quantity) == 'string', 'Quantity is required!')\n    assert(bint(msg.Quantity) > bint(0), 'Quantity must be greater than 0')\n\n    if not Balances[msg.From] then Balances[msg.From] = \"0\" end\n    if not Balances[msg.Recipient] then Balances[msg.Recipient] = \"0\" end\n\n    if bint(msg.Quantity) <= bint(Balances[msg.From]) then\n      Balances[msg.From] = utils.subtract(Balances[msg.From], msg.Quantity)\n      Balances[msg.Recipient] = utils.add(Balances[msg.Recipient], msg.Quantity)\n\n      --[[\n          Only send the notifications to the Sender and Recipient\n          if the Cast tag is not set on the Transfer message\n        ]]\n      --\n      if not msg.Cast then\n        -- Debit-Notice message template, that is sent to the Sender of the transfer\n        local debitNotice = {\n          Target = msg.From,\n          Action = 'Debit-Notice',\n          Recipient = msg.Recipient,\n          Quantity = msg.Quantity,\n          Data = Colors.gray ..\n              \"You transferred \" ..\n              Colors.blue .. msg.Quantity .. Colors.gray .. \" to \" .. Colors.green .. msg.Recipient .. Colors.reset\n        }\n        -- Credit-Notice message template, that is sent to the Recipient of the transfer\n        local creditNotice = {\n          Target = msg.Recipient,\n          Action = 'Credit-Notice',\n          Sender = msg.From,\n          Quantity = msg.Quantity,\n          Data = Colors.gray ..\n              \"You received \" ..\n              Colors.blue .. msg.Quantity .. Colors.gray .. \" from \" .. Colors.green .. msg.From .. Colors.reset\n        }\n\n        -- Add forwarded tags to the credit and debit notice messages\n        for tagName, tagValue in pairs(msg) do\n          -- Tags beginning with \"X-\" are forwarded\n          if string.sub(tagName, 1, 2) == \"X-\" then\n            debitNotice[tagName] = tagValue\n            creditNotice[tagName] = tagValue\n          end\n        end\n\n        -- Send Debit-Notice and Credit-Notice\n        ao.send(debitNotice)\n        ao.send(creditNotice)\n      end\n    else\n      ao.send({\n        Target = msg.From,\n        Action = 'Transfer-Error',\n        ['Message-Id'] = msg.Id,\n        Error = 'Insufficient Balance!'\n      })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n--[[\n     Total Supply\n   ]]\n--\ntoken.totalSupply = function(msg)\n  assert(msg.From ~= ao.id, 'Cannot call Total-Supply from the same process!')\n\n  ao.send({\n    Target = msg.From,\n    Action = 'Total-Supply',\n    Data = TotalSupply,\n    Ticker = Ticker\n  })\nend\n\n--[[\n Burn\n]] --\ntoken.burn = function(msg)\n  assert(type(msg.Quantity) == 'string', 'Quantity is required!')\n  assert(bint(msg.Quantity) <= bint(Balances[msg.From]), 'Quantity must be less than or equal to the current balance!')\n\n  Balances[msg.From] = utils.subtract(Balances[msg.From], msg.Quantity)\n  TotalSupply = utils.subtract(TotalSupply, msg.Quantity)\n\n  ao.send({\n    Target = msg.From,\n    Data = Colors.gray .. \"Successfully burned \" .. Colors.blue .. msg.Quantity .. Colors.reset\n  })\nend\n\n\nreturn token\n\nend\n\n_G.package.loaded[\"token\"] = _loaded_mod_token()\n\n-- module: \"allocator\"\nlocal function _loaded_mod_allocator()\n  local allocator = { _version = \"0.0.1\" }\n\nlocal bint = require('.bint')(256)\n\n-- utility functions\nlocal function reduce(func, initial, t)\n    local result = initial\n    for _, v in ipairs(t) do\n        result = func(result, v)\n    end\n    return result\nend\n\nlocal function values(t)\n    local result = {}\n    for _, v in pairs(t) do\n        table.insert(result, v)\n    end\n    return result\nend\n\nlocal function keys(t)\n    local result = {}\n    for k, _ in pairs(t) do\n        table.insert(result, k)\n    end\n    return result\nend\n\nlocal function sum(t)\n    return reduce(function(a, b) return a + b end, 0, t)\nend\n\nlocal function mergeAll(tables)\n    local result = {}\n    for _, t in ipairs(tables) do\n        for k, v in pairs(t) do\n            result[k] = v\n        end\n    end\n    return result\nend\n\n\nfunction allocator.allocate(balances, reward)\n    local function add(a, b) return bint(a) + bint(b) end\n\n    -- Calculate total positive balances\n    local total = reduce(add, bint(0), values(balances))\n    \n    -- Allocate rewards based on balances\n    local allocation = mergeAll(\n        reduce(function(a, s)\n            local asset = s[1]\n            local balance = bint(s[2])\n            \n            if balance < bint(1) then\n                return a\n            end\n            \n            local pct = (balance / total) * bint(100)\n            local coins = math.floor(bint(reward) * (pct / bint(100)) + (bint(1) / bint(2))) -- Round to nearest integer\n            \n            table.insert(a, {[asset] = tostring(coins)})\n            return a\n        end, {}, (function()\n            local result = {}\n            for k, v in pairs(balances) do\n                table.insert(result, {k, v})\n            end\n            return result\n        end)())\n    )\n    \n    -- Handle off by one errors\n    local remainder = reward - sum(values(allocation))\n    local k = keys(allocation)\n    local i = 1\n    while remainder > 0 do\n        allocation[k[i]] = allocation[k[i]] + 1\n        remainder = remainder - 1\n        i = (i % #k) + 1\n    end\n    \n    return allocation\nend\n\nreturn allocator\n\nend\n\n_G.package.loaded[\"allocator\"] = _loaded_mod_allocator()\n\n-- module: \"mint\"\nlocal function _loaded_mod_mint()\n--[[\n  Mint Module handles the minting functions for AO Token\n\n]]\nlocal bint = require('.bint')(256)\nlocal sqlite3 = require('lsqlite3')\nlocal Allocator = require('allocator')\n\nlocal allocate = Allocator.allocate\nMintCount = MintCount or 0\nMintDb = MintDb or sqlite3.open_memory()\nlocal INSERT_ORACLE_SQL = \"INSERT INTO Oracles (Oracle, Name, StartTimestamp, DelayDepositInterval) VALUES (?, ?, ?, ?)\"\n-- DbAdmin Module is required\ndbAdmin = dbAdmin or require('@rakis/DbAdmin').new(MintDb)\n-- processes or wallets allowed to send event batches\nBatchesAllowed = BatchesAllowed or\n    { \"88T4YtovZ9ZDgEh1Xb0T_VlF9rXCRFOdi_B2Eyv1eMs\", \"w7PAoAtLRjE48eW1qoKt5n5rzCyeOxDTt6RbYwELxDU\" }\nLastMintHeight = LastMintHeight or \"1443785\"\nRewards = {}\n\nlocal utils = {\n  add = function(a, b)\n    if (bint(a) < bint(0)) then\n      a = 0\n    end\n    if (bint(b) < bint(0)) then\n      b = 0\n    end\n    return tostring(bint(a) + bint(b))\n  end,\n  subtract = function(a, b)\n    if bint(b) < bint(0) then\n      b = 0\n    end\n    local value = bint(a) - bint(b)\n    if value < bint(0) then\n      return \"0\"\n    else\n      return tostring(bint(a) - bint(b))\n    end\n  end,\n  toBalanceValue = function(a)\n    return tostring(bint(a))\n  end,\n  toNumber = function(a)\n    return tonumber(a)\n  end,\n  greaterThan = function(a, b)\n    return bint(a) > bint(b)\n  end\n}\n\nlocal mint = { _version = \"0.0.1\" }\n\n-- local db functions\nlocal function insertOracle(oracle, name, startTimestamp, delayDepositInterval)\n  local stmt = MintDb:prepare(INSERT_ORACLE_SQL)\n\n  if stmt == nil then\n    error(\"Failed to prepare statement: \" .. MintDb:errmsg())\n  end\n\n  stmt:bind_values(oracle, name, startTimestamp, delayDepositInterval)\n\n  local result = stmt:step()\n  if result ~= sqlite3.DONE then\n    error(\"Failed to insert record: \" .. MintDb:errmsg())\n  end\n\n  stmt:finalize()\nend\n\nlocal function insertDeposit(recipient, oracle, user, token, amount, updated)\n  -- Prepare the SQL select statement to check if the record exists\n  local select_stmt = MintDb:prepare(\"SELECT Amount FROM Rewards WHERE Recipient = ? AND Token = ?\")\n  select_stmt:bind_values(recipient, token)\n  local result = select_stmt:step()\n\n  print(string.format(\"Adding Deposit to %s in the amount of %s for Token %s\", recipient, amount, token))\n  local rewardAccountExists = false\n  local current_amount = 0\n  if result == sqlite3.ROW then\n    rewardAccountExists = true\n    current_amount = bint(select_stmt:get_value(0))\n  end\n  select_stmt:finalize()\n\n  print(string.format(\"Current Amount %s\", current_amount))\n  --error(\"Current: \" .. current_amount .. \" amount: \" .. amount)\n  -- Calculate the new total amount\n  local total_amount = utils.add(current_amount, amount)\n\n  print(string.format(\"Total Amount %s\", total_amount))\n  if rewardAccountExists then\n    -- print(\"Adding Deposit\")\n    -- Prepare the SQL update statement to update the existing record\n    local update_stmt = MintDb:prepare(\"UPDATE Rewards SET Amount = ?, Updated = ? WHERE Recipient = ?\")\n    update_stmt:bind_values(total_amount, updated, recipient)\n    local update_result = update_stmt:step()\n    if update_result ~= sqlite3.DONE then\n      print(\"Failed to update record: \" .. MintDb:errmsg())\n    end\n    update_stmt:finalize()\n    -- print(\"Finish Update\")\n  else\n    -- print(\"Insert Deposit\")\n    -- Prepare the SQL insert statement to insert a new record\n    local insert_stmt = MintDb:prepare(\n      \"INSERT INTO Rewards (Recipient, Oracle, User, Token, Amount, Updated) VALUES (?, ?, ?, ?, ?, ?)\")\n    insert_stmt:bind_values(recipient, oracle, user, token, total_amount, updated)\n    local insert_result = insert_stmt:step()\n    if insert_result ~= sqlite3.DONE then\n      print(\"Failed to insert record: \" .. MintDb:errmsg())\n    end\n    insert_stmt:finalize()\n    -- print(\"Finish Deposit\")\n  end\nend\n\nlocal function updateWithdraw(user, amount, updated)\n  -- Prepare the SQL select statement to check if the record exists\n  local select_stmt = MintDb:prepare(\"SELECT Amount FROM Rewards WHERE Recipient = ? and Token = ?\")\n  select_stmt:bind_values(user, \"AR\")\n  local result = select_stmt:step()\n\n  local current_amount = 0\n  if result == sqlite3.ROW then\n    current_amount = bint(select_stmt:get_value(0))\n  end\n  select_stmt:finalize()\n\n  -- Calculate the new total amount\n  local total_amount = utils.subtract(current_amount, amount)\n  print(string.format(\"Withdraw from %s in the amount of %s leaves %s\", user, amount, total_amount))\n  if current_amount > 0 then\n    -- print(\"Updating Withdraw\")\n    -- Prepare the SQL update statement to update the existing record\n    local update_stmt = MintDb:prepare(\"UPDATE Rewards SET Amount = ?, Updated = ? WHERE User = ?\")\n    update_stmt:bind_values(total_amount, updated, user)\n    local update_result = update_stmt:step()\n    if update_result ~= sqlite3.DONE then\n      print(\"Failed to update record: \" .. MintDb:errmsg())\n    end\n    update_stmt:finalize()\n    -- print(\"Finish Update\")\n  end\nend\n\n-- init database\nfunction mint.init()\n  MintDb:exec [[\nCREATE TABLE IF NOT EXISTS Oracles (\n  Oracle TEXT PRIMARY KEY,\n  Name TEXT NOT NULL,\n  StartTimestamp TEXT NOT NULL,\n  DelayDepositInterval TEXT NOT NULL\n);\n\nCREATE TABLE IF NOT EXISTS Rewards (\n  Recipient TEXT NOT NULL,\n  Token TEXT NOT NULL,\n  Oracle TEXT NOT NULL,\n  User TEXT NOT NULL,\n  Amount TEXT NOT NULL,\n  Updated TEXT NOT NULL,\n  PRIMARY KEY (Recipient, Token),\n  FOREIGN KEY (Oracle) REFERENCES Oracles(Oracle)\n);\n  ]]\n  return \"Mint Initialized.\"\nend\n\nfunction mint.isOracle(msg)\n  if not Utils.includes(msg.Owner, ao.authorities) then\n    return false\n  end\n  local oracle = msg.From\n\n  local stmt = MintDb:prepare(\"SELECT 1 FROM Oracles WHERE Oracle = ?\")\n  stmt:bind_values(oracle)\n  stmt:step()\n  local exists = (stmt:get_value(0) ~= nil)\n  stmt:finalize()\n  return exists\nend\n\n-- handle register Oracle\nfunction mint.registerOracle(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Oracle) == \"string\", \"Oracle is required!\")\n    assert(type(msg.Name) == \"string\", \"Name is required!\")\n    assert(type(msg.Start) == \"string\", \"Start Timestamp required!\")\n    assert(type(msg.DepositDelay) == \"string\", \"Deposit Delay is required\")\n    insertOracle(msg.Oracle, msg.Name, msg.Start, msg.DepositDelay)\n    Send({ Target = msg.From, Data = \"registered.\" })\n  end)\n  if err then\n    print(err)\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle Deposit request\nfunction mint.handleDeposit(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Tags.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.User) == \"string\", \"User is required!\")\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    assert(type(msg.TokenAmount) == \"string\", \"TokenAmount is required!\")\n    assert(type(msg.Reward) == \"string\", \"Reward is required!\")\n    assert(type(msg.TransactionHash) == \"string\", \"TransactionHash is required!\")\n    -- assert(type(msg.Tags.Timestamp) == \"string\", \"Timestamp is required!\")\n    insertDeposit(msg.Recipient, msg.From, msg.User, msg.Token, msg.TokenAmount, msg.Timestamp)\n    Send({ Target = msg.From, Action = \"Deposit-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    if msg.User ~= msg.Recipient then\n      Send({ Target = msg.Recipient, Action = \"Deposit-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle Withdraw request\nfunction mint.handleWithdraw(msg)\n  local status, err = pcall(function()\n    assert(type(msg.Tags.Recipient) == 'string', 'Recipient is required!')\n    assert(type(msg.User) == \"string\", \"User is required!\")\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    assert(type(msg.TokenAmount) == \"string\", \"TokenAmount is required!\")\n    assert(type(msg.Reward) == \"string\", \"Reward is required!\")\n    assert(type(msg.TransactionHash) == \"string\", \"TransactionHash is required!\")\n    -- assert(type(msg.Tags.Timestamp) == \"string\", \"Timestamp is required!\")\n    updateWithdraw(msg.Recipient, msg.TokenAmount, msg.Timestamp)\n    Send({ Target = msg.From, Action = \"Withdraw-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    if msg.User ~= msg.Recipient then\n      Send({ Target = msg.Recipient, Action = \"Withdraw-Notice\", Data = msg.TokenAmount .. \"-\" .. msg.Token })\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Oracle OverPlus reward distribution\nfunction mint.handleOverPlus(msg)\n  -- TODO:\nend\n\nlocal function split_by_linefeed(str)\n  local result = {}\n  for line in str:gmatch(\"[^\\r\\n]+\") do\n    table.insert(result, line)\n  end\n  return result\nend\n\nlocal function split_by_comma(str)\n  local result = {}\n  for line in str:gmatch(\"[^,]+\") do\n    table.insert(result, line)\n  end\n  return result\nend\n\n-- Handle Batch Deposits mainly for loading WalletList\nfunction mint.Batch(msg)\n  local status, err = pcall(function()\n    if msg.Height and LastMintHeight >= msg.Height then\n      print(\"Already Applied Block: \" .. msg.Height)\n      return \"OK\"\n    end\n    assert(type(msg.Token) == \"string\", \"Token is required!\")\n    -- Batch can be in two formats\n    -- 1. Address:Balance KeyValue\n    -- 2. Mint Event Transactions \"Format = 'Event-List'\"\n    if msg.Format and msg.Format == \"Event-List\" then\n      print('Format: ' .. msg.Format)\n      -- event list\n      local events = require('json').decode(msg.Data)\n      print(string.format(\"Received %d events to process\", #events))\n      for i = 1, #events do\n        local event = events[i]\n        if event.Action == \"Deposit\" then\n          print(string.format('Deposited %s for %s', event.TokenAmount, event.Recipient))\n          insertDeposit(event.Recipient, msg.From, event.User, event.Token, event.TokenAmount, msg.Timestamp)\n        elseif event.Action == \"Withdraw\" then\n          local total = utils.add(event.TokenAmount, event.Fee or \"0\")\n          print(string.format(\"Withdraw %s for %s\", total, event.User))\n          updateWithdraw(event.User, total, event.Timestamp)\n        end\n      end\n    elseif msg.Format and msg.Format == \"Event-List-CSV\" then\n      local lines = split_by_linefeed(msg.Data)\n      for i = 1, #lines do\n        local fields = split_by_comma(lines[i])\n        local event = {\n          Action = fields[1],\n          Recipient = fields[2],\n          Reward = fields[3],\n          Fee = fields[4],\n          Timestamp = fields[5]\n        }\n        if event.Action == \"Deposit\" then\n          insertDeposit(event.Recipient, msg.From, event.Recipient, \"AR\", event.Reward, event.Timestamp)\n        elseif event.Action == \"Withdraw\" then\n          local total = utils.add(event.Reward or \"0\", event.Fee or \"0\")\n          updateWithdraw(event.Recipient, total, event.Timestamp)\n        end\n        -- print('Processed: ' .. lines[i])\n      end\n      return #lines\n    else\n      -- do key/value\n      local deposits = require('json').decode(msg.Data)\n      for k, v in pairs(deposits) do\n        print('insert deposit: ' .. v .. ' to ' .. k)\n        insertDeposit(k, msg.From, k, msg.Token, v, msg.Timestamp)\n        Send({ Target = k, Action = \"Deposit-Notice\", Data = v .. \"-\" .. msg.Token })\n      end\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\nfunction mint.LoadBalances(msg)\n  local status, err = pcall(function()\n    local deposits = require('json').decode(msg.Data)\n    for k, v in pairs(deposits) do\n      print('initialize balance: ' .. v .. ' to ' .. k)\n      Balances[k] = v\n    end\n  end)\n  if err then\n    Send({ Target = msg.From, Data = err })\n    return err\n  end\n  return \"OK\"\nend\n\n-- handle Mint\nfunction mint.Mint(msg)\n  if msg.Action == \"Cron\" and MODE == \"OFF\" then\n    print(\"Not Minting by CRON untils MODE is set to ON\")\n    return \"OK\"\n  end\n\n  print('Minting Every 5 minutes!')\n  -- Get Reward List\n  local list = Utils.reduce(\n    function(acc, item)\n      acc[item.Recipient] = item.Amount\n      return acc\n    end,\n    {},\n    dbAdmin:exec [[select Recipient, Amount from Rewards;]]\n  )\n  -- Get Remaining Supply\n  local remainingSupply = utils.subtract(TotalSupply, MintedSupply)\n  -- Get Reward Percent\n  local reward = string.format('%.0f', bint(remainingSupply) * ARM_Mint_PCT)\n  -- Allocate Rewards\n  local rewards = allocate(list, reward)\n  local supply = \"0\"\n  -- Update Balances\n  for k, v in pairs(rewards) do\n    if not Balances[k] then\n      Balances[k] = \"0\"\n    end\n    Balances[k] = utils.add(Balances[k], v)\n    -- print(\"Address: \" .. k .. \" Balance \" .. Balances[k])\n    supply = utils.add(supply, Balances[k])\n  end\n  -- Calculate Circulating Supply\n  MintedSupply = supply\n  Send({ Target = msg.From, Data = \"Minted AO Token Rewards\" })\n  LastMintTimestamp = msg.Timestamp\n  MintCount = MintCount + 1\n  return \"ok\"\nend\n\n-- matchers\nfunction mint.isRegister(msg)\n  return ao.id == msg.From and ao.isTrusted(msg) and msg.Action == \"Oracle.Register\"\nend\n\nfunction mint.isDeposit(msg)\n  return msg.Action == \"Deposit\" and mint.isOracle(msg)\nend\n\nfunction mint.isWithdraw(msg)\n  return msg.Action == \"Withdraw\" and mint.isOracle(msg)\nend\n\nfunction mint.isOverPlus(msg)\n  return msg.Action == \"OverPlus\" and mint.isOracle(msg)\nend\n\nfunction mint.isBatch(msg)\n  -- return msg.Action == \"Mint.Batch\" and MODE == \"OFF\" and msg.Owner == \"w7PAoAtLRjE48eW1qoKt5n5rzCyeOxDTt6RbYwELxDU\"\n  return msg.Action == \"Mint.Batch\" and Utils.includes(msg.From, BatchesAllowed)\nend\n\nfunction mint.isLoadBalances(msg)\n  return msg.Action == \"Mint.LoadBalances\" and Utils.includes(msg.From, BatchesAllowed)\nend\n\nfunction mint.isCron(msg)\n  return msg.Action == \"Cron\" and msg.From == \"gCpQfnG6nWLlKs8jYgV8oUfe38GYrPLv59AC7LCtCGg\"\nend\n\nreturn mint\n\nend\n\n_G.package.loaded[\"mint\"] = _loaded_mod_mint()\n\n--[[\n  AO Token uses the local token contract\n]]\nlocal token = require('token')\nlocal bint = require('.bint')(256)\n\n-- LastMintTimestamp\nLastMintTimestamp = LastMintTimestamp or 0\n-- MODE - OFF = Manual Minting only, ON = Automated Minting\nMODE = MODE or \"OFF\"\n\n-- Circulating Supply\nMintedSupply = MintedSupply or \"0\"\n-- 5 MIN REWARD SUPPLY PERCENT\nAR_Mint_PCT = bint(\"1647321875\") / bint(\"1000\")\nARM_Mint_PCT = AR_Mint_PCT / bint(\"1000000000000\")\n\nMint = require('mint')\n\nHandlers.add('mint.register', Mint.isRegister, Mint.registerOracle)\nHandlers.add('mint.deposit', Mint.isDeposit, Mint.handleDeposit)\nHandlers.add('mint.withdraw', Mint.isWithdraw, Mint.handleWithdraw)\n\nHandlers.add('cron.mint', Mint.isCron, Mint.Mint)\nHandlers.add('mint.batch', Mint.isBatch, Mint.Batch)\nHandlers.add('mint.loadbalances', Mint.isLoadBalances, Mint.LoadBalances)\n\nHandlers.add('token.info',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Info\"),\n  token.info\n)\n\nHandlers.add('token.balance',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Balance\"),\n  token.balance\n)\n\nHandlers.add('token.balances',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Balances\"),\n  token.balances\n)\n\nHandlers.add('token.transfer',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Transfer\"),\n  token.transfer\n)\n\nHandlers.add('token.totalSupply',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Total-Supply\"),\n  token.totalSupply\n)\n\nHandlers.add('token.burn',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Burn\"),\n  token.burn\n)\n\nHandlers.add('token.mintedSupply',\n  Handlers.utils.hasMatchingTag(\"Action\", \"Minted-Supply\"),\n  function(msg)\n    Send({ Target = msg.From, Data = MintedSupply })\n    print(\"Id: \" .. msg.From .. \" Requested Minted Supply: \" .. MintedSupply)\n  end\n)\n\n-- need to create this in aos\n--[[\nNeed to implement this in aos to always run this handler no matter what at the end.\n\nHandlers.always('mint.automatic', function (msg)\n  local Now = msg.Timestamp\n  if MODE == \"ON\" then\n     if Now > LastMintTimestamp + FIVE_MINUTES and Now < LastMintTimestamp + TEN_MINUTES then\n       Mint\n     end\n     Mint.Mint(msg)\n     return \"ok\"\n  end\n\nend)\n]]\n\nreturn 2\n"
            }
        },
        "cursor": "1718297658219"
    },
    {
        "node": {
            "message": {
                "id": "op-cpu4rmI6liNhl_4Uv7pBvpg7dz9di5SO0cn-lI9w",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1 + 1"
            }
        },
        "cursor": "1718297621316"
    },
    {
        "node": {
            "message": {
                "id": "xNu2Yy1Ld1nHYw_3w_-BBD-M9xw-KN5BcpzvvxEsLAQ",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718297617302"
    },
    {
        "node": {
            "message": {
                "id": "XoXvjjXCMJCvM0JKvpwg5ITOAjzULOPEPqzTT0C-BLw",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "Owner = \"MVodtUI63DwPqb_qp7DULH1iFp1rwcpQ6lSKzgcW0eI\""
            }
        },
        "cursor": "1718297388547"
    },
    {
        "node": {
            "message": {
                "id": "3y2u-p-DGofY1iGKknae6pRCAc-M6K4cQxIwUjQQQ5M",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718297360401"
    },
    {
        "node": {
            "message": {
                "id": "0sLbSo_riE9sr1apBdQjZaLJUmu6YIzaT7dGblMvpKQ",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718296134112"
    },
    {
        "node": {
            "message": {
                "id": "ijics25bUW0Q58mkn7pdXb36TsB5_5ow5MPbWizOP8k",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718296131397"
    },
    {
        "node": {
            "message": {
                "id": "Ig37EhKjWqp8JzJ0okN0BXk9WwpO0S_gStApwlkJES8",
                "tags": [
                    {
                        "name": "Action",
                        "value": "Eval"
                    },
                    {
                        "name": "Data-Protocol",
                        "value": "ao"
                    },
                    {
                        "name": "Variant",
                        "value": "ao.TN.1"
                    },
                    {
                        "name": "Type",
                        "value": "Message"
                    },
                    {
                        "name": "SDK",
                        "value": "aoconnect"
                    }
                ],
                "data": "1984"
            }
        },
        "cursor": "1718296127731"
    }
]